/*
 * scheduler.c
 *
 *  Created on: Dec 4, 2023
 *      Author: Nguyuyen
 */

#include "scheduler.h"
#include "main.h"

void SCH_Init(void){
  for(int i = 0;i < SCH_MAX_TASKS; ++i){
    SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
    SCH_tasks_G[TASK_INDEX].Delay = 0;
    SCH_tasks_G[TASK_INDEX].Period = 0;
    SCH_tasks_G[TASK_INDEX].RunMe = 0;
  }
}
void SCH_Update(void){
  unsigned char Index ;
  for(Index = 0; Index < SCH_MAX_TASKS; Index++) {
    if(SCH_tasks_G[Index].pTask) {
      if(SCH_tasks_G[Index].Delay == 0) {
	SCH_tasks_G[Index].RunMe += 1;
	if(SCH_tasks_G[Index].Period) {
	  SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
	}
      } else {
	SCH_tasks_G[Index].Delay âˆ’= 1;
      }
    }
  }
}
void SCH_Dispatch_Tasks(void);
uint32_t SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD);
uint8_t SCH_Delete_Task(uint32_t taskID){
  SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
  SCH_tasks_G[TASK_INDEX].Delay = 0;
  SCH_tasks_G[TASK_INDEX].Period = 0;
  SCH_tasks_G[TASK_INDEX].RunMe = 0;
  return 0;
}
