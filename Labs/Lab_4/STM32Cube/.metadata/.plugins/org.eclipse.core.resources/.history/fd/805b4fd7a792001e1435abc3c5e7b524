/*
 * scheduler.c
 *
 *  Created on: Dec 4, 2023
 *      Author: Nguyuyen
 */

#include "scheduler.h"

void Timer_Init(){
  HAL_TIM_Base_Start_IT(&htim2);
}
void SCH_Init(void){
  for(int i = 0;i < SCH_MAX_TASKS; ++i){
    SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
    SCH_tasks_G[TASK_INDEX].Delay = 0;
    SCH_tasks_G[TASK_INDEX].Period = 0;
    SCH_tasks_G[TASK_INDEX].RunMe = 0;
  }
  Timer_Init();
}
void SCH_Update(void){
  unsigned char Index ;
  for(Index = 0; Index < SCH_MAX_TASKS; Index++) {
    if(SCH_tasks_G[Index].pTask) {
      if(SCH_tasks_G[Index].Delay == 0) {
	SCH_tasks_G[Index].RunMe += 1;
	if(SCH_tasks_G[Index].Period) {
	  SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
	}
      } else {
	SCH_tasks_G[Index].Delay -= 1;
      }
    }
  }
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim ){
  SCH_Update();
}
void SCH_Dispatch_Tasks(void){
  unsigned char Index ;
  for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
    if (SCH_tasks_G[Index].RunMe > 0) {
      (*SCH_tasks_G[Index].pTask)();
      SCH_tasks_G[Index].RunMe -= 1;
      if (SCH_tasks_G[Index].Period == 0 ){
        SCH_Delete_Task(Index);
      }
    }
  }
}
uint32_t SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD){
  unsigned char Index = 0;
  while ((SCH_tasks_G[Index].pTask != 0 ) && (Index < SCH_MAX_TASKS)){
    Index ++;
  }
  if (Index == SCH_MAX_TASKS){
//    Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
    return SCH_MAX_TASKS;
  }
  SCH_tasks_G[Index].pTask = pFunction ;
  SCH_tasks_G[Index].Delay = DELAY;
  SCH_tasks_G[Index].Period = PERIOD;
  SCH_tasks_G[Index].RunMe = 0;
  return Index ;
}
uint8_t SCH_Delete_Task(uint32_t taskID){
  SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
  SCH_tasks_G[TASK_INDEX].Delay = 0;
  SCH_tasks_G[TASK_INDEX].Period = 0;
  SCH_tasks_G[TASK_INDEX].RunMe = 0;
  return 0;
}
