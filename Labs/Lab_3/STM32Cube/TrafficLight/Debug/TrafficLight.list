
TrafficLight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000266c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002778  08002778  00012778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027a4  080027a4  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080027a4  080027a4  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027a4  080027a4  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027a4  080027a4  000127a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027a8  080027a8  000127a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080027ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000088  08002834  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08002834  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ca1  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b13  00000000  00000000  00029d52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  0002b868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  0002c288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ca5  00000000  00000000  0002cbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b8e6  00000000  00000000  00043855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000826a5  00000000  00000000  0004f13b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d17e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002828  00000000  00000000  000d1834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08002760 	.word	0x08002760

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08002760 	.word	0x08002760

0800014c <initButton>:
GPIO_PinState button_buffer[BUTTON_NUMBER];
GPIO_PinState button_buffer_press_then_release[BUTTON_NUMBER];
GPIO_PinState debounce_button_buffer_now[BUTTON_NUMBER];
GPIO_PinState debounce_button_buffer_pre[BUTTON_NUMBER];

void initButton(){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
  for(char i = 0; i < BUTTON_NUMBER; ++i){
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e012      	b.n	800017e <initButton+0x32>
    button_buffer[i] = BUTTON_RELEASED;
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	4a0d      	ldr	r2, [pc, #52]	; (8000190 <initButton+0x44>)
 800015c:	2101      	movs	r1, #1
 800015e:	54d1      	strb	r1, [r2, r3]
    button_buffer_press_then_release[i] = BUTTON_RELEASED;
 8000160:	79fb      	ldrb	r3, [r7, #7]
 8000162:	4a0c      	ldr	r2, [pc, #48]	; (8000194 <initButton+0x48>)
 8000164:	2101      	movs	r1, #1
 8000166:	54d1      	strb	r1, [r2, r3]
    debounce_button_buffer_now[i] = BUTTON_RELEASED;
 8000168:	79fb      	ldrb	r3, [r7, #7]
 800016a:	4a0b      	ldr	r2, [pc, #44]	; (8000198 <initButton+0x4c>)
 800016c:	2101      	movs	r1, #1
 800016e:	54d1      	strb	r1, [r2, r3]
    debounce_button_buffer_pre[i] = BUTTON_RELEASED;
 8000170:	79fb      	ldrb	r3, [r7, #7]
 8000172:	4a0a      	ldr	r2, [pc, #40]	; (800019c <initButton+0x50>)
 8000174:	2101      	movs	r1, #1
 8000176:	54d1      	strb	r1, [r2, r3]
  for(char i = 0; i < BUTTON_NUMBER; ++i){
 8000178:	79fb      	ldrb	r3, [r7, #7]
 800017a:	3301      	adds	r3, #1
 800017c:	71fb      	strb	r3, [r7, #7]
 800017e:	79fb      	ldrb	r3, [r7, #7]
 8000180:	2b02      	cmp	r3, #2
 8000182:	d9e9      	bls.n	8000158 <initButton+0xc>
  }
}
 8000184:	bf00      	nop
 8000186:	bf00      	nop
 8000188:	370c      	adds	r7, #12
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	200000c4 	.word	0x200000c4
 8000194:	200000c8 	.word	0x200000c8
 8000198:	200000bc 	.word	0x200000bc
 800019c:	200000c0 	.word	0x200000c0

080001a0 <buttonReading>:
void buttonReading(){
 80001a0:	b590      	push	{r4, r7, lr}
 80001a2:	b083      	sub	sp, #12
 80001a4:	af00      	add	r7, sp, #0
  for(char i = 0; i < BUTTON_NUMBER; ++i){
 80001a6:	2300      	movs	r3, #0
 80001a8:	71fb      	strb	r3, [r7, #7]
 80001aa:	e036      	b.n	800021a <buttonReading+0x7a>
    debounce_button_buffer_pre[i] = debounce_button_buffer_now[i];
 80001ac:	79fa      	ldrb	r2, [r7, #7]
 80001ae:	79fb      	ldrb	r3, [r7, #7]
 80001b0:	491e      	ldr	r1, [pc, #120]	; (800022c <buttonReading+0x8c>)
 80001b2:	5c89      	ldrb	r1, [r1, r2]
 80001b4:	4a1e      	ldr	r2, [pc, #120]	; (8000230 <buttonReading+0x90>)
 80001b6:	54d1      	strb	r1, [r2, r3]
    debounce_button_buffer_now[i] = HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN[i]);
 80001b8:	79fb      	ldrb	r3, [r7, #7]
 80001ba:	4a1e      	ldr	r2, [pc, #120]	; (8000234 <buttonReading+0x94>)
 80001bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001c0:	79fc      	ldrb	r4, [r7, #7]
 80001c2:	4619      	mov	r1, r3
 80001c4:	481c      	ldr	r0, [pc, #112]	; (8000238 <buttonReading+0x98>)
 80001c6:	f001 fa93 	bl	80016f0 <HAL_GPIO_ReadPin>
 80001ca:	4603      	mov	r3, r0
 80001cc:	461a      	mov	r2, r3
 80001ce:	4b17      	ldr	r3, [pc, #92]	; (800022c <buttonReading+0x8c>)
 80001d0:	551a      	strb	r2, [r3, r4]
    if(debounce_button_buffer_now[i] == debounce_button_buffer_pre[i]){
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	4a15      	ldr	r2, [pc, #84]	; (800022c <buttonReading+0x8c>)
 80001d6:	5cd2      	ldrb	r2, [r2, r3]
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	4915      	ldr	r1, [pc, #84]	; (8000230 <buttonReading+0x90>)
 80001dc:	5ccb      	ldrb	r3, [r1, r3]
 80001de:	429a      	cmp	r2, r3
 80001e0:	d118      	bne.n	8000214 <buttonReading+0x74>
      if(button_buffer[i] == BUTTON_PRESSED && debounce_button_buffer_now[i] == BUTTON_RELEASED)
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	4a15      	ldr	r2, [pc, #84]	; (800023c <buttonReading+0x9c>)
 80001e6:	5cd3      	ldrb	r3, [r2, r3]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d109      	bne.n	8000200 <buttonReading+0x60>
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	4a0f      	ldr	r2, [pc, #60]	; (800022c <buttonReading+0x8c>)
 80001f0:	5cd3      	ldrb	r3, [r2, r3]
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	d104      	bne.n	8000200 <buttonReading+0x60>
	button_buffer_press_then_release[i] = BUTTON_PRESSED;
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	4a11      	ldr	r2, [pc, #68]	; (8000240 <buttonReading+0xa0>)
 80001fa:	2100      	movs	r1, #0
 80001fc:	54d1      	strb	r1, [r2, r3]
 80001fe:	e003      	b.n	8000208 <buttonReading+0x68>
      else
	button_buffer_press_then_release[i] = BUTTON_RELEASED;
 8000200:	79fb      	ldrb	r3, [r7, #7]
 8000202:	4a0f      	ldr	r2, [pc, #60]	; (8000240 <buttonReading+0xa0>)
 8000204:	2101      	movs	r1, #1
 8000206:	54d1      	strb	r1, [r2, r3]
      button_buffer[i] = debounce_button_buffer_now[i];
 8000208:	79fa      	ldrb	r2, [r7, #7]
 800020a:	79fb      	ldrb	r3, [r7, #7]
 800020c:	4907      	ldr	r1, [pc, #28]	; (800022c <buttonReading+0x8c>)
 800020e:	5c89      	ldrb	r1, [r1, r2]
 8000210:	4a0a      	ldr	r2, [pc, #40]	; (800023c <buttonReading+0x9c>)
 8000212:	54d1      	strb	r1, [r2, r3]
  for(char i = 0; i < BUTTON_NUMBER; ++i){
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	3301      	adds	r3, #1
 8000218:	71fb      	strb	r3, [r7, #7]
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	2b02      	cmp	r3, #2
 800021e:	d9c5      	bls.n	80001ac <buttonReading+0xc>
    }
  }
}
 8000220:	bf00      	nop
 8000222:	bf00      	nop
 8000224:	370c      	adds	r7, #12
 8000226:	46bd      	mov	sp, r7
 8000228:	bd90      	pop	{r4, r7, pc}
 800022a:	bf00      	nop
 800022c:	200000bc 	.word	0x200000bc
 8000230:	200000c0 	.word	0x200000c0
 8000234:	08002778 	.word	0x08002778
 8000238:	40010800 	.word	0x40010800
 800023c:	200000c4 	.word	0x200000c4
 8000240:	200000c8 	.word	0x200000c8

08000244 <isButtonPressed>:
unsigned char isButtonPressed(unsigned char index){
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	4603      	mov	r3, r0
 800024c:	71fb      	strb	r3, [r7, #7]
  if (index >= BUTTON_NUMBER)
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	2b02      	cmp	r3, #2
 8000252:	d901      	bls.n	8000258 <isButtonPressed+0x14>
    return 0;
 8000254:	2300      	movs	r3, #0
 8000256:	e007      	b.n	8000268 <isButtonPressed+0x24>
  return (button_buffer[index] == BUTTON_PRESSED);
 8000258:	79fb      	ldrb	r3, [r7, #7]
 800025a:	4a06      	ldr	r2, [pc, #24]	; (8000274 <isButtonPressed+0x30>)
 800025c:	5cd3      	ldrb	r3, [r2, r3]
 800025e:	2b00      	cmp	r3, #0
 8000260:	bf0c      	ite	eq
 8000262:	2301      	moveq	r3, #1
 8000264:	2300      	movne	r3, #0
 8000266:	b2db      	uxtb	r3, r3
}
 8000268:	4618      	mov	r0, r3
 800026a:	370c      	adds	r7, #12
 800026c:	46bd      	mov	sp, r7
 800026e:	bc80      	pop	{r7}
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	200000c4 	.word	0x200000c4

08000278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800027c:	f000 ff4e 	bl	800111c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000280:	f000 f838 	bl	80002f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000284:	f000 f8be 	bl	8000404 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000288:	f000 f870 	bl	800036c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800028c:	4816      	ldr	r0, [pc, #88]	; (80002e8 <main+0x70>)
 800028e:	f001 fea3 	bl	8001fd8 <HAL_TIM_Base_Start_IT>
  initTimer();
 8000292:	f000 fab5 	bl	8000800 <initTimer>
  initButton();
 8000296:	f7ff ff59 	bl	800014c <initButton>
  activeTrafficLight();
 800029a:	f000 ff01 	bl	80010a0 <activeTrafficLight>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if(timer_flag[3] == 1){
 800029e:	4b13      	ldr	r3, [pc, #76]	; (80002ec <main+0x74>)
 80002a0:	68db      	ldr	r3, [r3, #12]
 80002a2:	2b01      	cmp	r3, #1
 80002a4:	d105      	bne.n	80002b2 <main+0x3a>
      setTimer(3, BUTTON_READING_TIME);
 80002a6:	2132      	movs	r1, #50	; 0x32
 80002a8:	2003      	movs	r0, #3
 80002aa:	f000 fabf 	bl	800082c <setTimer>
      buttonReading();
 80002ae:	f7ff ff77 	bl	80001a0 <buttonReading>
    }
    if(timer_flag[1] == 1){
 80002b2:	4b0e      	ldr	r3, [pc, #56]	; (80002ec <main+0x74>)
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	2b01      	cmp	r3, #1
 80002b8:	d112      	bne.n	80002e0 <main+0x68>
      setTimer(1, SCAN_7SEG_TIME);
 80002ba:	21fa      	movs	r1, #250	; 0xfa
 80002bc:	2001      	movs	r0, #1
 80002be:	f000 fab5 	bl	800082c <setTimer>
      update7Seg(seven_segment_index++);
 80002c2:	4b0b      	ldr	r3, [pc, #44]	; (80002f0 <main+0x78>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	1c5a      	adds	r2, r3, #1
 80002c8:	4909      	ldr	r1, [pc, #36]	; (80002f0 <main+0x78>)
 80002ca:	600a      	str	r2, [r1, #0]
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 f9ef 	bl	80006b0 <update7Seg>
      if(seven_segment_index >= SEVEN_SEGMENT_NUMBER)
 80002d2:	4b07      	ldr	r3, [pc, #28]	; (80002f0 <main+0x78>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	2b03      	cmp	r3, #3
 80002d8:	dd02      	ble.n	80002e0 <main+0x68>
	seven_segment_index = 0;
 80002da:	4b05      	ldr	r3, [pc, #20]	; (80002f0 <main+0x78>)
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
    }
    controlTrafficLight();
 80002e0:	f000 fafe 	bl	80008e0 <controlTrafficLight>
    if(timer_flag[3] == 1){
 80002e4:	e7db      	b.n	800029e <main+0x26>
 80002e6:	bf00      	nop
 80002e8:	200000cc 	.word	0x200000cc
 80002ec:	20000124 	.word	0x20000124
 80002f0:	200000b4 	.word	0x200000b4

080002f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b090      	sub	sp, #64	; 0x40
 80002f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fa:	f107 0318 	add.w	r3, r7, #24
 80002fe:	2228      	movs	r2, #40	; 0x28
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f002 fa24 	bl	8002750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
 8000314:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000316:	2302      	movs	r3, #2
 8000318:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031a:	2301      	movs	r3, #1
 800031c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800031e:	2310      	movs	r3, #16
 8000320:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000322:	2300      	movs	r3, #0
 8000324:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000326:	f107 0318 	add.w	r3, r7, #24
 800032a:	4618      	mov	r0, r3
 800032c:	f001 fa28 	bl	8001780 <HAL_RCC_OscConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000336:	f000 f8c7 	bl	80004c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033a:	230f      	movs	r3, #15
 800033c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800033e:	2300      	movs	r3, #0
 8000340:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f001 fc94 	bl	8001c80 <HAL_RCC_ClockConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800035e:	f000 f8b3 	bl	80004c8 <Error_Handler>
  }
}
 8000362:	bf00      	nop
 8000364:	3740      	adds	r7, #64	; 0x40
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
	...

0800036c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b086      	sub	sp, #24
 8000370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000372:	f107 0308 	add.w	r3, r7, #8
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000380:	463b      	mov	r3, r7
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000388:	4b1d      	ldr	r3, [pc, #116]	; (8000400 <MX_TIM2_Init+0x94>)
 800038a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800038e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000390:	4b1b      	ldr	r3, [pc, #108]	; (8000400 <MX_TIM2_Init+0x94>)
 8000392:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000396:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000398:	4b19      	ldr	r3, [pc, #100]	; (8000400 <MX_TIM2_Init+0x94>)
 800039a:	2200      	movs	r2, #0
 800039c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800039e:	4b18      	ldr	r3, [pc, #96]	; (8000400 <MX_TIM2_Init+0x94>)
 80003a0:	2209      	movs	r2, #9
 80003a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003a4:	4b16      	ldr	r3, [pc, #88]	; (8000400 <MX_TIM2_Init+0x94>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003aa:	4b15      	ldr	r3, [pc, #84]	; (8000400 <MX_TIM2_Init+0x94>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003b0:	4813      	ldr	r0, [pc, #76]	; (8000400 <MX_TIM2_Init+0x94>)
 80003b2:	f001 fdc1 	bl	8001f38 <HAL_TIM_Base_Init>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80003bc:	f000 f884 	bl	80004c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003c6:	f107 0308 	add.w	r3, r7, #8
 80003ca:	4619      	mov	r1, r3
 80003cc:	480c      	ldr	r0, [pc, #48]	; (8000400 <MX_TIM2_Init+0x94>)
 80003ce:	f001 ff57 	bl	8002280 <HAL_TIM_ConfigClockSource>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80003d8:	f000 f876 	bl	80004c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003dc:	2300      	movs	r3, #0
 80003de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003e0:	2300      	movs	r3, #0
 80003e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003e4:	463b      	mov	r3, r7
 80003e6:	4619      	mov	r1, r3
 80003e8:	4805      	ldr	r0, [pc, #20]	; (8000400 <MX_TIM2_Init+0x94>)
 80003ea:	f002 f923 	bl	8002634 <HAL_TIMEx_MasterConfigSynchronization>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80003f4:	f000 f868 	bl	80004c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003f8:	bf00      	nop
 80003fa:	3718      	adds	r7, #24
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	200000cc 	.word	0x200000cc

08000404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b086      	sub	sp, #24
 8000408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040a:	f107 0308 	add.w	r3, r7, #8
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000418:	4b28      	ldr	r3, [pc, #160]	; (80004bc <MX_GPIO_Init+0xb8>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a27      	ldr	r2, [pc, #156]	; (80004bc <MX_GPIO_Init+0xb8>)
 800041e:	f043 0304 	orr.w	r3, r3, #4
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b25      	ldr	r3, [pc, #148]	; (80004bc <MX_GPIO_Init+0xb8>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f003 0304 	and.w	r3, r3, #4
 800042c:	607b      	str	r3, [r7, #4]
 800042e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000430:	4b22      	ldr	r3, [pc, #136]	; (80004bc <MX_GPIO_Init+0xb8>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	4a21      	ldr	r2, [pc, #132]	; (80004bc <MX_GPIO_Init+0xb8>)
 8000436:	f043 0308 	orr.w	r3, r3, #8
 800043a:	6193      	str	r3, [r2, #24]
 800043c:	4b1f      	ldr	r3, [pc, #124]	; (80004bc <MX_GPIO_Init+0xb8>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	f003 0308 	and.w	r3, r3, #8
 8000444:	603b      	str	r3, [r7, #0]
 8000446:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|LED_GREEN_X_Pin
 8000448:	2200      	movs	r2, #0
 800044a:	f643 717f 	movw	r1, #16255	; 0x3f7f
 800044e:	481c      	ldr	r0, [pc, #112]	; (80004c0 <MX_GPIO_Init+0xbc>)
 8000450:	f001 f965 	bl	800171e <HAL_GPIO_WritePin>
                          |LED_RED_Y_Pin|LED_AMBER_Y_Pin|LED_GREEN_Y_Pin|SEG_D_Pin
                          |SEG_E_Pin|SEG_F_Pin|SEG_G_Pin|LED_RED_X_Pin
                          |LED_AMBER_X_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_TL_Pin|EN_7SEG_X0_Pin|EN_7SEG_X1_Pin|EN_7SEG_Y0_Pin
 8000454:	2200      	movs	r2, #0
 8000456:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 800045a:	481a      	ldr	r0, [pc, #104]	; (80004c4 <MX_GPIO_Init+0xc0>)
 800045c:	f001 f95f 	bl	800171e <HAL_GPIO_WritePin>
                          |EN_7SEG_Y1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8000460:	23e0      	movs	r3, #224	; 0xe0
 8000462:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000464:	2300      	movs	r3, #0
 8000466:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000468:	2300      	movs	r3, #0
 800046a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046c:	f107 0308 	add.w	r3, r7, #8
 8000470:	4619      	mov	r1, r3
 8000472:	4814      	ldr	r0, [pc, #80]	; (80004c4 <MX_GPIO_Init+0xc0>)
 8000474:	f000 ffc2 	bl	80013fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_A_Pin SEG_B_Pin SEG_C_Pin LED_GREEN_X_Pin
                           LED_RED_Y_Pin LED_AMBER_Y_Pin LED_GREEN_Y_Pin SEG_D_Pin
                           SEG_E_Pin SEG_F_Pin SEG_G_Pin LED_RED_X_Pin
                           LED_AMBER_X_Pin */
  GPIO_InitStruct.Pin = SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|LED_GREEN_X_Pin
 8000478:	f643 737f 	movw	r3, #16255	; 0x3f7f
 800047c:	60bb      	str	r3, [r7, #8]
                          |LED_RED_Y_Pin|LED_AMBER_Y_Pin|LED_GREEN_Y_Pin|SEG_D_Pin
                          |SEG_E_Pin|SEG_F_Pin|SEG_G_Pin|LED_RED_X_Pin
                          |LED_AMBER_X_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047e:	2301      	movs	r3, #1
 8000480:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2300      	movs	r3, #0
 8000484:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000486:	2302      	movs	r3, #2
 8000488:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800048a:	f107 0308 	add.w	r3, r7, #8
 800048e:	4619      	mov	r1, r3
 8000490:	480b      	ldr	r0, [pc, #44]	; (80004c0 <MX_GPIO_Init+0xbc>)
 8000492:	f000 ffb3 	bl	80013fc <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_TL_Pin EN_7SEG_X0_Pin EN_7SEG_X1_Pin EN_7SEG_Y0_Pin
                           EN_7SEG_Y1_Pin */
  GPIO_InitStruct.Pin = EN_TL_Pin|EN_7SEG_X0_Pin|EN_7SEG_X1_Pin|EN_7SEG_Y0_Pin
 8000496:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800049a:	60bb      	str	r3, [r7, #8]
                          |EN_7SEG_Y1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049c:	2301      	movs	r3, #1
 800049e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	2300      	movs	r3, #0
 80004a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a4:	2302      	movs	r3, #2
 80004a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a8:	f107 0308 	add.w	r3, r7, #8
 80004ac:	4619      	mov	r1, r3
 80004ae:	4805      	ldr	r0, [pc, #20]	; (80004c4 <MX_GPIO_Init+0xc0>)
 80004b0:	f000 ffa4 	bl	80013fc <HAL_GPIO_Init>

}
 80004b4:	bf00      	nop
 80004b6:	3718      	adds	r7, #24
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40021000 	.word	0x40021000
 80004c0:	40010c00 	.word	0x40010c00
 80004c4:	40010800 	.word	0x40010800

080004c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004cc:	b672      	cpsid	i
}
 80004ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <Error_Handler+0x8>
	...

080004d4 <update7SegBuffer>:
  {GPIO_PIN_SET  , GPIO_PIN_SET  , GPIO_PIN_SET  , GPIO_PIN_RESET}
};
int seven_segment_buffer[SEVEN_SEGMENT_NUMBER] = {0, 0, 0, 0};
int seven_segment_index = 0;

void update7SegBuffer(int number_x, int number_y){
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	6039      	str	r1, [r7, #0]
  if(number_x < NUMBER_X_MIN || number_x > NUMBER_X_MAX || number_y < NUMBER_Y_MIN || number_y > NUMBER_Y_MAX)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	db37      	blt.n	8000554 <update7SegBuffer+0x80>
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2b63      	cmp	r3, #99	; 0x63
 80004e8:	dc34      	bgt.n	8000554 <update7SegBuffer+0x80>
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	db31      	blt.n	8000554 <update7SegBuffer+0x80>
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	2b63      	cmp	r3, #99	; 0x63
 80004f4:	dc2e      	bgt.n	8000554 <update7SegBuffer+0x80>
    return;
  seven_segment_buffer[0] = number_x % 10;
 80004f6:	6879      	ldr	r1, [r7, #4]
 80004f8:	4b19      	ldr	r3, [pc, #100]	; (8000560 <update7SegBuffer+0x8c>)
 80004fa:	fb83 2301 	smull	r2, r3, r3, r1
 80004fe:	109a      	asrs	r2, r3, #2
 8000500:	17cb      	asrs	r3, r1, #31
 8000502:	1ad2      	subs	r2, r2, r3
 8000504:	4613      	mov	r3, r2
 8000506:	009b      	lsls	r3, r3, #2
 8000508:	4413      	add	r3, r2
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	1aca      	subs	r2, r1, r3
 800050e:	4b15      	ldr	r3, [pc, #84]	; (8000564 <update7SegBuffer+0x90>)
 8000510:	601a      	str	r2, [r3, #0]
  seven_segment_buffer[1] = number_x / 10;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4a12      	ldr	r2, [pc, #72]	; (8000560 <update7SegBuffer+0x8c>)
 8000516:	fb82 1203 	smull	r1, r2, r2, r3
 800051a:	1092      	asrs	r2, r2, #2
 800051c:	17db      	asrs	r3, r3, #31
 800051e:	1ad3      	subs	r3, r2, r3
 8000520:	4a10      	ldr	r2, [pc, #64]	; (8000564 <update7SegBuffer+0x90>)
 8000522:	6053      	str	r3, [r2, #4]
  seven_segment_buffer[2] = number_y % 10;
 8000524:	6839      	ldr	r1, [r7, #0]
 8000526:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <update7SegBuffer+0x8c>)
 8000528:	fb83 2301 	smull	r2, r3, r3, r1
 800052c:	109a      	asrs	r2, r3, #2
 800052e:	17cb      	asrs	r3, r1, #31
 8000530:	1ad2      	subs	r2, r2, r3
 8000532:	4613      	mov	r3, r2
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	4413      	add	r3, r2
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	1aca      	subs	r2, r1, r3
 800053c:	4b09      	ldr	r3, [pc, #36]	; (8000564 <update7SegBuffer+0x90>)
 800053e:	609a      	str	r2, [r3, #8]
  seven_segment_buffer[3] = number_y / 10;
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	4a07      	ldr	r2, [pc, #28]	; (8000560 <update7SegBuffer+0x8c>)
 8000544:	fb82 1203 	smull	r1, r2, r2, r3
 8000548:	1092      	asrs	r2, r2, #2
 800054a:	17db      	asrs	r3, r3, #31
 800054c:	1ad3      	subs	r3, r2, r3
 800054e:	4a05      	ldr	r2, [pc, #20]	; (8000564 <update7SegBuffer+0x90>)
 8000550:	60d3      	str	r3, [r2, #12]
 8000552:	e000      	b.n	8000556 <update7SegBuffer+0x82>
    return;
 8000554:	bf00      	nop
}
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	66666667 	.word	0x66666667
 8000564:	200000a4 	.word	0x200000a4

08000568 <display7Seg>:
void display7Seg(int number){
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  if(number >= 0 && number <= 9){
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	2b00      	cmp	r3, #0
 8000574:	db5c      	blt.n	8000630 <display7Seg+0xc8>
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b09      	cmp	r3, #9
 800057a:	dc59      	bgt.n	8000630 <display7Seg+0xc8>
    HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, seven_segment_display_pin_state[number][0]);
 800057c:	492e      	ldr	r1, [pc, #184]	; (8000638 <display7Seg+0xd0>)
 800057e:	687a      	ldr	r2, [r7, #4]
 8000580:	4613      	mov	r3, r2
 8000582:	00db      	lsls	r3, r3, #3
 8000584:	1a9b      	subs	r3, r3, r2
 8000586:	440b      	add	r3, r1
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	461a      	mov	r2, r3
 800058c:	2101      	movs	r1, #1
 800058e:	482b      	ldr	r0, [pc, #172]	; (800063c <display7Seg+0xd4>)
 8000590:	f001 f8c5 	bl	800171e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, seven_segment_display_pin_state[number][1]);
 8000594:	4928      	ldr	r1, [pc, #160]	; (8000638 <display7Seg+0xd0>)
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	4613      	mov	r3, r2
 800059a:	00db      	lsls	r3, r3, #3
 800059c:	1a9b      	subs	r3, r3, r2
 800059e:	440b      	add	r3, r1
 80005a0:	3301      	adds	r3, #1
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	461a      	mov	r2, r3
 80005a6:	2102      	movs	r1, #2
 80005a8:	4824      	ldr	r0, [pc, #144]	; (800063c <display7Seg+0xd4>)
 80005aa:	f001 f8b8 	bl	800171e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, seven_segment_display_pin_state[number][2]);
 80005ae:	4922      	ldr	r1, [pc, #136]	; (8000638 <display7Seg+0xd0>)
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	4613      	mov	r3, r2
 80005b4:	00db      	lsls	r3, r3, #3
 80005b6:	1a9b      	subs	r3, r3, r2
 80005b8:	440b      	add	r3, r1
 80005ba:	3302      	adds	r3, #2
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	461a      	mov	r2, r3
 80005c0:	2104      	movs	r1, #4
 80005c2:	481e      	ldr	r0, [pc, #120]	; (800063c <display7Seg+0xd4>)
 80005c4:	f001 f8ab 	bl	800171e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, seven_segment_display_pin_state[number][3]);
 80005c8:	491b      	ldr	r1, [pc, #108]	; (8000638 <display7Seg+0xd0>)
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	4613      	mov	r3, r2
 80005ce:	00db      	lsls	r3, r3, #3
 80005d0:	1a9b      	subs	r3, r3, r2
 80005d2:	440b      	add	r3, r1
 80005d4:	3303      	adds	r3, #3
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	461a      	mov	r2, r3
 80005da:	2108      	movs	r1, #8
 80005dc:	4817      	ldr	r0, [pc, #92]	; (800063c <display7Seg+0xd4>)
 80005de:	f001 f89e 	bl	800171e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, seven_segment_display_pin_state[number][4]);
 80005e2:	4915      	ldr	r1, [pc, #84]	; (8000638 <display7Seg+0xd0>)
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	4613      	mov	r3, r2
 80005e8:	00db      	lsls	r3, r3, #3
 80005ea:	1a9b      	subs	r3, r3, r2
 80005ec:	440b      	add	r3, r1
 80005ee:	3304      	adds	r3, #4
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	461a      	mov	r2, r3
 80005f4:	2110      	movs	r1, #16
 80005f6:	4811      	ldr	r0, [pc, #68]	; (800063c <display7Seg+0xd4>)
 80005f8:	f001 f891 	bl	800171e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, seven_segment_display_pin_state[number][5]);
 80005fc:	490e      	ldr	r1, [pc, #56]	; (8000638 <display7Seg+0xd0>)
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	4613      	mov	r3, r2
 8000602:	00db      	lsls	r3, r3, #3
 8000604:	1a9b      	subs	r3, r3, r2
 8000606:	440b      	add	r3, r1
 8000608:	3305      	adds	r3, #5
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	461a      	mov	r2, r3
 800060e:	2120      	movs	r1, #32
 8000610:	480a      	ldr	r0, [pc, #40]	; (800063c <display7Seg+0xd4>)
 8000612:	f001 f884 	bl	800171e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, seven_segment_display_pin_state[number][6]);
 8000616:	4908      	ldr	r1, [pc, #32]	; (8000638 <display7Seg+0xd0>)
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	4613      	mov	r3, r2
 800061c:	00db      	lsls	r3, r3, #3
 800061e:	1a9b      	subs	r3, r3, r2
 8000620:	440b      	add	r3, r1
 8000622:	3306      	adds	r3, #6
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	461a      	mov	r2, r3
 8000628:	2140      	movs	r1, #64	; 0x40
 800062a:	4804      	ldr	r0, [pc, #16]	; (800063c <display7Seg+0xd4>)
 800062c:	f001 f877 	bl	800171e <HAL_GPIO_WritePin>
  }
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000000 	.word	0x20000000
 800063c:	40010c00 	.word	0x40010c00

08000640 <active7Seg>:
void active7Seg(int index){
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(EN_7SEG_X0_GPIO_Port, EN_7SEG_X0_Pin, seven_segment_enable_pin_state[index][0]);
 8000648:	4a17      	ldr	r2, [pc, #92]	; (80006a8 <active7Seg+0x68>)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000650:	461a      	mov	r2, r3
 8000652:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000656:	4815      	ldr	r0, [pc, #84]	; (80006ac <active7Seg+0x6c>)
 8000658:	f001 f861 	bl	800171e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN_7SEG_X1_GPIO_Port, EN_7SEG_X1_Pin, seven_segment_enable_pin_state[index][1]);
 800065c:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <active7Seg+0x68>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	4413      	add	r3, r2
 8000664:	785b      	ldrb	r3, [r3, #1]
 8000666:	461a      	mov	r2, r3
 8000668:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800066c:	480f      	ldr	r0, [pc, #60]	; (80006ac <active7Seg+0x6c>)
 800066e:	f001 f856 	bl	800171e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN_7SEG_Y0_GPIO_Port, EN_7SEG_Y0_Pin, seven_segment_enable_pin_state[index][2]);
 8000672:	4a0d      	ldr	r2, [pc, #52]	; (80006a8 <active7Seg+0x68>)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	4413      	add	r3, r2
 800067a:	789b      	ldrb	r3, [r3, #2]
 800067c:	461a      	mov	r2, r3
 800067e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000682:	480a      	ldr	r0, [pc, #40]	; (80006ac <active7Seg+0x6c>)
 8000684:	f001 f84b 	bl	800171e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN_7SEG_Y1_GPIO_Port, EN_7SEG_Y1_Pin, seven_segment_enable_pin_state[index][3]);
 8000688:	4a07      	ldr	r2, [pc, #28]	; (80006a8 <active7Seg+0x68>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	4413      	add	r3, r2
 8000690:	78db      	ldrb	r3, [r3, #3]
 8000692:	461a      	mov	r2, r3
 8000694:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000698:	4804      	ldr	r0, [pc, #16]	; (80006ac <active7Seg+0x6c>)
 800069a:	f001 f840 	bl	800171e <HAL_GPIO_WritePin>
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000048 	.word	0x20000048
 80006ac:	40010800 	.word	0x40010800

080006b0 <update7Seg>:
void update7Seg(int index){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  if(index >= 0 && index < SEVEN_SEGMENT_NUMBER){
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	db0c      	blt.n	80006d8 <update7Seg+0x28>
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	2b03      	cmp	r3, #3
 80006c2:	dc09      	bgt.n	80006d8 <update7Seg+0x28>
    active7Seg(index);
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f7ff ffbb 	bl	8000640 <active7Seg>
    display7Seg(seven_segment_buffer[index]);
 80006ca:	4a05      	ldr	r2, [pc, #20]	; (80006e0 <update7Seg+0x30>)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff ff48 	bl	8000568 <display7Seg>
  }
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	200000a4 	.word	0x200000a4

080006e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006ea:	4b15      	ldr	r3, [pc, #84]	; (8000740 <HAL_MspInit+0x5c>)
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	4a14      	ldr	r2, [pc, #80]	; (8000740 <HAL_MspInit+0x5c>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6193      	str	r3, [r2, #24]
 80006f6:	4b12      	ldr	r3, [pc, #72]	; (8000740 <HAL_MspInit+0x5c>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <HAL_MspInit+0x5c>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	4a0e      	ldr	r2, [pc, #56]	; (8000740 <HAL_MspInit+0x5c>)
 8000708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070c:	61d3      	str	r3, [r2, #28]
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <HAL_MspInit+0x5c>)
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <HAL_MspInit+0x60>)
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	4a04      	ldr	r2, [pc, #16]	; (8000744 <HAL_MspInit+0x60>)
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000736:	bf00      	nop
 8000738:	3714      	adds	r7, #20
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr
 8000740:	40021000 	.word	0x40021000
 8000744:	40010000 	.word	0x40010000

08000748 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000758:	d113      	bne.n	8000782 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <HAL_TIM_Base_MspInit+0x44>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	4a0b      	ldr	r2, [pc, #44]	; (800078c <HAL_TIM_Base_MspInit+0x44>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	61d3      	str	r3, [r2, #28]
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <HAL_TIM_Base_MspInit+0x44>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2100      	movs	r1, #0
 8000776:	201c      	movs	r0, #28
 8000778:	f000 fe09 	bl	800138e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800077c:	201c      	movs	r0, #28
 800077e:	f000 fe22 	bl	80013c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000782:	bf00      	nop
 8000784:	3710      	adds	r7, #16
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40021000 	.word	0x40021000

08000790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000794:	e7fe      	b.n	8000794 <NMI_Handler+0x4>

08000796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800079a:	e7fe      	b.n	800079a <HardFault_Handler+0x4>

0800079c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <MemManage_Handler+0x4>

080007a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <BusFault_Handler+0x4>

080007a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <UsageFault_Handler+0x4>

080007ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr

080007ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr

080007c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr

080007d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d6:	f000 fce7 	bl	80011a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80007e4:	4802      	ldr	r0, [pc, #8]	; (80007f0 <TIM2_IRQHandler+0x10>)
 80007e6:	f001 fc43 	bl	8002070 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200000cc 	.word	0x200000cc

080007f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr

08000800 <initTimer>:
 * timer2: traffic light
 * timer3: read button
 */
int timer_flag[TIMER_NUMBER];

void initTimer(){
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  setTimer(0, BLINK_LED_TIME);
 8000804:	21fa      	movs	r1, #250	; 0xfa
 8000806:	2000      	movs	r0, #0
 8000808:	f000 f810 	bl	800082c <setTimer>
  setTimer(1, SCAN_7SEG_TIME);
 800080c:	21fa      	movs	r1, #250	; 0xfa
 800080e:	2001      	movs	r0, #1
 8000810:	f000 f80c 	bl	800082c <setTimer>
  setTimer(2, TRAFFIC_LIGHT_TIME);
 8000814:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000818:	2002      	movs	r0, #2
 800081a:	f000 f807 	bl	800082c <setTimer>
  setTimer(3, BUTTON_READING_TIME);
 800081e:	2132      	movs	r1, #50	; 0x32
 8000820:	2003      	movs	r0, #3
 8000822:	f000 f803 	bl	800082c <setTimer>
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <setTimer>:
 * timer0: blink led
 * timer1: scan 7seg
 * timer2: traffic light
 * timer3: read button
 */
void setTimer(int index, int duration){
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	6039      	str	r1, [r7, #0]
  timer_counter[index] = duration / TIME_CYCLE;
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	4a09      	ldr	r2, [pc, #36]	; (8000860 <setTimer+0x34>)
 800083a:	fb82 1203 	smull	r1, r2, r2, r3
 800083e:	1092      	asrs	r2, r2, #2
 8000840:	17db      	asrs	r3, r3, #31
 8000842:	1ad2      	subs	r2, r2, r3
 8000844:	4907      	ldr	r1, [pc, #28]	; (8000864 <setTimer+0x38>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  timer_flag[index] = 0;
 800084c:	4a06      	ldr	r2, [pc, #24]	; (8000868 <setTimer+0x3c>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2100      	movs	r1, #0
 8000852:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr
 8000860:	66666667 	.word	0x66666667
 8000864:	20000114 	.word	0x20000114
 8000868:	20000124 	.word	0x20000124

0800086c <runTimer>:
void runTimer(){
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
  for(int i = 0; i < TIMER_NUMBER; ++i){
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	e01c      	b.n	80008b2 <runTimer+0x46>
    if(timer_counter[i] > 0){
 8000878:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <runTimer+0x58>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000880:	2b00      	cmp	r3, #0
 8000882:	dd13      	ble.n	80008ac <runTimer+0x40>
      --timer_counter[i];
 8000884:	4a0f      	ldr	r2, [pc, #60]	; (80008c4 <runTimer+0x58>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800088c:	1e5a      	subs	r2, r3, #1
 800088e:	490d      	ldr	r1, [pc, #52]	; (80008c4 <runTimer+0x58>)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      if(timer_counter[i] == 0)
 8000896:	4a0b      	ldr	r2, [pc, #44]	; (80008c4 <runTimer+0x58>)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d104      	bne.n	80008ac <runTimer+0x40>
	timer_flag[i] = 1;
 80008a2:	4a09      	ldr	r2, [pc, #36]	; (80008c8 <runTimer+0x5c>)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2101      	movs	r1, #1
 80008a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i = 0; i < TIMER_NUMBER; ++i){
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3301      	adds	r3, #1
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2b03      	cmp	r3, #3
 80008b6:	dddf      	ble.n	8000878 <runTimer+0xc>
    }
  }
}
 80008b8:	bf00      	nop
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr
 80008c4:	20000114 	.word	0x20000114
 80008c8:	20000124 	.word	0x20000124

080008cc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  runTimer();
 80008d4:	f7ff ffca 	bl	800086c <runTimer>
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <controlTrafficLight>:
 * 2: green
 */
int traffic_light_time_buffer_temp[3] = {RED_TIME_DEFAULT, AMBER_TIME_DEFAULT, GREEN_TIME_DEFAULT};
int time_counter_x, time_counter_y;

void controlTrafficLight(){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  switch (traffic_light_state) {
 80008e4:	4bac      	ldr	r3, [pc, #688]	; (8000b98 <controlTrafficLight+0x2b8>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b08      	cmp	r3, #8
 80008ea:	f200 826c 	bhi.w	8000dc6 <controlTrafficLight+0x4e6>
 80008ee:	a201      	add	r2, pc, #4	; (adr r2, 80008f4 <controlTrafficLight+0x14>)
 80008f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f4:	08000919 	.word	0x08000919
 80008f8:	08000969 	.word	0x08000969
 80008fc:	080009f1 	.word	0x080009f1
 8000900:	08000a81 	.word	0x08000a81
 8000904:	08000b09 	.word	0x08000b09
 8000908:	08000bb5 	.word	0x08000bb5
 800090c:	08000c37 	.word	0x08000c37
 8000910:	08000cb9 	.word	0x08000cb9
 8000914:	08000d35 	.word	0x08000d35
    case INIT:
      traffic_light_state = RED_GREEN;
 8000918:	4b9f      	ldr	r3, [pc, #636]	; (8000b98 <controlTrafficLight+0x2b8>)
 800091a:	2201      	movs	r2, #1
 800091c:	701a      	strb	r2, [r3, #0]
      activeTrafficLight();
 800091e:	f000 fbbf 	bl	80010a0 <activeTrafficLight>
      traffic_light_display_state = XRED_YGREEN;
 8000922:	4b9e      	ldr	r3, [pc, #632]	; (8000b9c <controlTrafficLight+0x2bc>)
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]
      time_counter_x = traffic_light_time_buffer[0];
 8000928:	4b9d      	ldr	r3, [pc, #628]	; (8000ba0 <controlTrafficLight+0x2c0>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a9d      	ldr	r2, [pc, #628]	; (8000ba4 <controlTrafficLight+0x2c4>)
 800092e:	6013      	str	r3, [r2, #0]
      time_counter_y = traffic_light_time_buffer[2];
 8000930:	4b9b      	ldr	r3, [pc, #620]	; (8000ba0 <controlTrafficLight+0x2c0>)
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	4a9c      	ldr	r2, [pc, #624]	; (8000ba8 <controlTrafficLight+0x2c8>)
 8000936:	6013      	str	r3, [r2, #0]
      update7SegBuffer(--time_counter_x, --time_counter_y);
 8000938:	4b9a      	ldr	r3, [pc, #616]	; (8000ba4 <controlTrafficLight+0x2c4>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	3b01      	subs	r3, #1
 800093e:	4a99      	ldr	r2, [pc, #612]	; (8000ba4 <controlTrafficLight+0x2c4>)
 8000940:	6013      	str	r3, [r2, #0]
 8000942:	4b98      	ldr	r3, [pc, #608]	; (8000ba4 <controlTrafficLight+0x2c4>)
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	4b98      	ldr	r3, [pc, #608]	; (8000ba8 <controlTrafficLight+0x2c8>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	3b01      	subs	r3, #1
 800094c:	4996      	ldr	r1, [pc, #600]	; (8000ba8 <controlTrafficLight+0x2c8>)
 800094e:	600b      	str	r3, [r1, #0]
 8000950:	4b95      	ldr	r3, [pc, #596]	; (8000ba8 <controlTrafficLight+0x2c8>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4619      	mov	r1, r3
 8000956:	4610      	mov	r0, r2
 8000958:	f7ff fdbc 	bl	80004d4 <update7SegBuffer>
      setTimer(0, TRAFFIC_LIGHT_TIME);
 800095c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000960:	2000      	movs	r0, #0
 8000962:	f7ff ff63 	bl	800082c <setTimer>
      break;
 8000966:	e23d      	b.n	8000de4 <controlTrafficLight+0x504>
    case RED_GREEN:
      if(isButtonPressed(0) == 1){
 8000968:	2000      	movs	r0, #0
 800096a:	f7ff fc6b 	bl	8000244 <isButtonPressed>
 800096e:	4603      	mov	r3, r0
 8000970:	2b01      	cmp	r3, #1
 8000972:	d110      	bne.n	8000996 <controlTrafficLight+0xb6>
	traffic_light_state = MODIFY_RED;
 8000974:	4b88      	ldr	r3, [pc, #544]	; (8000b98 <controlTrafficLight+0x2b8>)
 8000976:	2205      	movs	r2, #5
 8000978:	701a      	strb	r2, [r3, #0]
	traffic_light_display_state = ARED;
 800097a:	4b88      	ldr	r3, [pc, #544]	; (8000b9c <controlTrafficLight+0x2bc>)
 800097c:	2204      	movs	r2, #4
 800097e:	701a      	strb	r2, [r3, #0]
	update7SegBuffer(traffic_light_time_buffer_temp[0], 2);
 8000980:	4b8a      	ldr	r3, [pc, #552]	; (8000bac <controlTrafficLight+0x2cc>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2102      	movs	r1, #2
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff fda4 	bl	80004d4 <update7SegBuffer>
	setTimer(0, BLINK_LED_TIME);
 800098c:	21fa      	movs	r1, #250	; 0xfa
 800098e:	2000      	movs	r0, #0
 8000990:	f7ff ff4c 	bl	800082c <setTimer>
	    time_counter_y = traffic_light_time_buffer[1];
	  }
	  update7SegBuffer(--time_counter_x, --time_counter_y);
	}
      }
      break;
 8000994:	e219      	b.n	8000dca <controlTrafficLight+0x4ea>
	if(timer_flag[2] == 1){
 8000996:	4b86      	ldr	r3, [pc, #536]	; (8000bb0 <controlTrafficLight+0x2d0>)
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	2b01      	cmp	r3, #1
 800099c:	f040 8215 	bne.w	8000dca <controlTrafficLight+0x4ea>
	  setTimer(2, TRAFFIC_LIGHT_TIME);
 80009a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009a4:	2002      	movs	r0, #2
 80009a6:	f7ff ff41 	bl	800082c <setTimer>
	  if(time_counter_y <= 0){
 80009aa:	4b7f      	ldr	r3, [pc, #508]	; (8000ba8 <controlTrafficLight+0x2c8>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	dc0b      	bgt.n	80009ca <controlTrafficLight+0xea>
	    traffic_light_state = RED_AMBER;
 80009b2:	4b79      	ldr	r3, [pc, #484]	; (8000b98 <controlTrafficLight+0x2b8>)
 80009b4:	2202      	movs	r2, #2
 80009b6:	701a      	strb	r2, [r3, #0]
	    activeTrafficLight();
 80009b8:	f000 fb72 	bl	80010a0 <activeTrafficLight>
	    traffic_light_display_state = XRED_YAMBER;
 80009bc:	4b77      	ldr	r3, [pc, #476]	; (8000b9c <controlTrafficLight+0x2bc>)
 80009be:	2201      	movs	r2, #1
 80009c0:	701a      	strb	r2, [r3, #0]
	    time_counter_y = traffic_light_time_buffer[1];
 80009c2:	4b77      	ldr	r3, [pc, #476]	; (8000ba0 <controlTrafficLight+0x2c0>)
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	4a78      	ldr	r2, [pc, #480]	; (8000ba8 <controlTrafficLight+0x2c8>)
 80009c8:	6013      	str	r3, [r2, #0]
	  update7SegBuffer(--time_counter_x, --time_counter_y);
 80009ca:	4b76      	ldr	r3, [pc, #472]	; (8000ba4 <controlTrafficLight+0x2c4>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	3b01      	subs	r3, #1
 80009d0:	4a74      	ldr	r2, [pc, #464]	; (8000ba4 <controlTrafficLight+0x2c4>)
 80009d2:	6013      	str	r3, [r2, #0]
 80009d4:	4b73      	ldr	r3, [pc, #460]	; (8000ba4 <controlTrafficLight+0x2c4>)
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	4b73      	ldr	r3, [pc, #460]	; (8000ba8 <controlTrafficLight+0x2c8>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	3b01      	subs	r3, #1
 80009de:	4972      	ldr	r1, [pc, #456]	; (8000ba8 <controlTrafficLight+0x2c8>)
 80009e0:	600b      	str	r3, [r1, #0]
 80009e2:	4b71      	ldr	r3, [pc, #452]	; (8000ba8 <controlTrafficLight+0x2c8>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4619      	mov	r1, r3
 80009e8:	4610      	mov	r0, r2
 80009ea:	f7ff fd73 	bl	80004d4 <update7SegBuffer>
      break;
 80009ee:	e1ec      	b.n	8000dca <controlTrafficLight+0x4ea>
    case RED_AMBER:
      if(isButtonPressed(0) == 1){
 80009f0:	2000      	movs	r0, #0
 80009f2:	f7ff fc27 	bl	8000244 <isButtonPressed>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d110      	bne.n	8000a1e <controlTrafficLight+0x13e>
      	traffic_light_state = MODIFY_RED;
 80009fc:	4b66      	ldr	r3, [pc, #408]	; (8000b98 <controlTrafficLight+0x2b8>)
 80009fe:	2205      	movs	r2, #5
 8000a00:	701a      	strb	r2, [r3, #0]
      	traffic_light_display_state = ARED;
 8000a02:	4b66      	ldr	r3, [pc, #408]	; (8000b9c <controlTrafficLight+0x2bc>)
 8000a04:	2204      	movs	r2, #4
 8000a06:	701a      	strb	r2, [r3, #0]
	update7SegBuffer(traffic_light_time_buffer_temp[0], 2);
 8000a08:	4b68      	ldr	r3, [pc, #416]	; (8000bac <controlTrafficLight+0x2cc>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2102      	movs	r1, #2
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fd60 	bl	80004d4 <update7SegBuffer>
	setTimer(0, BLINK_LED_TIME);
 8000a14:	21fa      	movs	r1, #250	; 0xfa
 8000a16:	2000      	movs	r0, #0
 8000a18:	f7ff ff08 	bl	800082c <setTimer>
	    time_counter_y = traffic_light_time_buffer[0];
	  }
	  update7SegBuffer(--time_counter_x, --time_counter_y);
	}
      }
      break;
 8000a1c:	e1d7      	b.n	8000dce <controlTrafficLight+0x4ee>
	if(timer_flag[2] == 1){
 8000a1e:	4b64      	ldr	r3, [pc, #400]	; (8000bb0 <controlTrafficLight+0x2d0>)
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	f040 81d3 	bne.w	8000dce <controlTrafficLight+0x4ee>
	  setTimer(2, TRAFFIC_LIGHT_TIME);
 8000a28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a2c:	2002      	movs	r0, #2
 8000a2e:	f7ff fefd 	bl	800082c <setTimer>
	  if(time_counter_y <= 0){
 8000a32:	4b5d      	ldr	r3, [pc, #372]	; (8000ba8 <controlTrafficLight+0x2c8>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	dc0f      	bgt.n	8000a5a <controlTrafficLight+0x17a>
	    traffic_light_state = GREEN_RED;
 8000a3a:	4b57      	ldr	r3, [pc, #348]	; (8000b98 <controlTrafficLight+0x2b8>)
 8000a3c:	2203      	movs	r2, #3
 8000a3e:	701a      	strb	r2, [r3, #0]
	    activeTrafficLight();
 8000a40:	f000 fb2e 	bl	80010a0 <activeTrafficLight>
	    traffic_light_display_state = XGREEN_YRED;
 8000a44:	4b55      	ldr	r3, [pc, #340]	; (8000b9c <controlTrafficLight+0x2bc>)
 8000a46:	2202      	movs	r2, #2
 8000a48:	701a      	strb	r2, [r3, #0]
	    time_counter_x = traffic_light_time_buffer[2];
 8000a4a:	4b55      	ldr	r3, [pc, #340]	; (8000ba0 <controlTrafficLight+0x2c0>)
 8000a4c:	689b      	ldr	r3, [r3, #8]
 8000a4e:	4a55      	ldr	r2, [pc, #340]	; (8000ba4 <controlTrafficLight+0x2c4>)
 8000a50:	6013      	str	r3, [r2, #0]
	    time_counter_y = traffic_light_time_buffer[0];
 8000a52:	4b53      	ldr	r3, [pc, #332]	; (8000ba0 <controlTrafficLight+0x2c0>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a54      	ldr	r2, [pc, #336]	; (8000ba8 <controlTrafficLight+0x2c8>)
 8000a58:	6013      	str	r3, [r2, #0]
	  update7SegBuffer(--time_counter_x, --time_counter_y);
 8000a5a:	4b52      	ldr	r3, [pc, #328]	; (8000ba4 <controlTrafficLight+0x2c4>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	4a50      	ldr	r2, [pc, #320]	; (8000ba4 <controlTrafficLight+0x2c4>)
 8000a62:	6013      	str	r3, [r2, #0]
 8000a64:	4b4f      	ldr	r3, [pc, #316]	; (8000ba4 <controlTrafficLight+0x2c4>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	4b4f      	ldr	r3, [pc, #316]	; (8000ba8 <controlTrafficLight+0x2c8>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	494e      	ldr	r1, [pc, #312]	; (8000ba8 <controlTrafficLight+0x2c8>)
 8000a70:	600b      	str	r3, [r1, #0]
 8000a72:	4b4d      	ldr	r3, [pc, #308]	; (8000ba8 <controlTrafficLight+0x2c8>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4619      	mov	r1, r3
 8000a78:	4610      	mov	r0, r2
 8000a7a:	f7ff fd2b 	bl	80004d4 <update7SegBuffer>
      break;
 8000a7e:	e1a6      	b.n	8000dce <controlTrafficLight+0x4ee>
    case GREEN_RED:
      if(isButtonPressed(0) == 1){
 8000a80:	2000      	movs	r0, #0
 8000a82:	f7ff fbdf 	bl	8000244 <isButtonPressed>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d110      	bne.n	8000aae <controlTrafficLight+0x1ce>
      	traffic_light_state = MODIFY_RED;
 8000a8c:	4b42      	ldr	r3, [pc, #264]	; (8000b98 <controlTrafficLight+0x2b8>)
 8000a8e:	2205      	movs	r2, #5
 8000a90:	701a      	strb	r2, [r3, #0]
      	traffic_light_display_state = ARED;
 8000a92:	4b42      	ldr	r3, [pc, #264]	; (8000b9c <controlTrafficLight+0x2bc>)
 8000a94:	2204      	movs	r2, #4
 8000a96:	701a      	strb	r2, [r3, #0]
	update7SegBuffer(traffic_light_time_buffer_temp[0], 2);
 8000a98:	4b44      	ldr	r3, [pc, #272]	; (8000bac <controlTrafficLight+0x2cc>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2102      	movs	r1, #2
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff fd18 	bl	80004d4 <update7SegBuffer>
	setTimer(0, BLINK_LED_TIME);
 8000aa4:	21fa      	movs	r1, #250	; 0xfa
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f7ff fec0 	bl	800082c <setTimer>
	    time_counter_x = traffic_light_time_buffer[1];
	  }
	  update7SegBuffer(--time_counter_x, --time_counter_y);
	}
      }
      break;
 8000aac:	e191      	b.n	8000dd2 <controlTrafficLight+0x4f2>
	if(timer_flag[2] == 1){
 8000aae:	4b40      	ldr	r3, [pc, #256]	; (8000bb0 <controlTrafficLight+0x2d0>)
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	f040 818d 	bne.w	8000dd2 <controlTrafficLight+0x4f2>
	  setTimer(2, TRAFFIC_LIGHT_TIME);
 8000ab8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000abc:	2002      	movs	r0, #2
 8000abe:	f7ff feb5 	bl	800082c <setTimer>
	  if(time_counter_x <= 0){
 8000ac2:	4b38      	ldr	r3, [pc, #224]	; (8000ba4 <controlTrafficLight+0x2c4>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	dc0b      	bgt.n	8000ae2 <controlTrafficLight+0x202>
	    traffic_light_state = AMBER_RED;
 8000aca:	4b33      	ldr	r3, [pc, #204]	; (8000b98 <controlTrafficLight+0x2b8>)
 8000acc:	2204      	movs	r2, #4
 8000ace:	701a      	strb	r2, [r3, #0]
	    activeTrafficLight();
 8000ad0:	f000 fae6 	bl	80010a0 <activeTrafficLight>
	    traffic_light_display_state = XAMBER_YRED;
 8000ad4:	4b31      	ldr	r3, [pc, #196]	; (8000b9c <controlTrafficLight+0x2bc>)
 8000ad6:	2203      	movs	r2, #3
 8000ad8:	701a      	strb	r2, [r3, #0]
	    time_counter_x = traffic_light_time_buffer[1];
 8000ada:	4b31      	ldr	r3, [pc, #196]	; (8000ba0 <controlTrafficLight+0x2c0>)
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	4a31      	ldr	r2, [pc, #196]	; (8000ba4 <controlTrafficLight+0x2c4>)
 8000ae0:	6013      	str	r3, [r2, #0]
	  update7SegBuffer(--time_counter_x, --time_counter_y);
 8000ae2:	4b30      	ldr	r3, [pc, #192]	; (8000ba4 <controlTrafficLight+0x2c4>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	4a2e      	ldr	r2, [pc, #184]	; (8000ba4 <controlTrafficLight+0x2c4>)
 8000aea:	6013      	str	r3, [r2, #0]
 8000aec:	4b2d      	ldr	r3, [pc, #180]	; (8000ba4 <controlTrafficLight+0x2c4>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b2d      	ldr	r3, [pc, #180]	; (8000ba8 <controlTrafficLight+0x2c8>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	3b01      	subs	r3, #1
 8000af6:	492c      	ldr	r1, [pc, #176]	; (8000ba8 <controlTrafficLight+0x2c8>)
 8000af8:	600b      	str	r3, [r1, #0]
 8000afa:	4b2b      	ldr	r3, [pc, #172]	; (8000ba8 <controlTrafficLight+0x2c8>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4619      	mov	r1, r3
 8000b00:	4610      	mov	r0, r2
 8000b02:	f7ff fce7 	bl	80004d4 <update7SegBuffer>
      break;
 8000b06:	e164      	b.n	8000dd2 <controlTrafficLight+0x4f2>
    case AMBER_RED:
      if(isButtonPressed(0) == 1){
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f7ff fb9b 	bl	8000244 <isButtonPressed>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d110      	bne.n	8000b36 <controlTrafficLight+0x256>
      	traffic_light_state = MODIFY_RED;
 8000b14:	4b20      	ldr	r3, [pc, #128]	; (8000b98 <controlTrafficLight+0x2b8>)
 8000b16:	2205      	movs	r2, #5
 8000b18:	701a      	strb	r2, [r3, #0]
      	traffic_light_display_state = ARED;
 8000b1a:	4b20      	ldr	r3, [pc, #128]	; (8000b9c <controlTrafficLight+0x2bc>)
 8000b1c:	2204      	movs	r2, #4
 8000b1e:	701a      	strb	r2, [r3, #0]
	update7SegBuffer(traffic_light_time_buffer_temp[0], 2);
 8000b20:	4b22      	ldr	r3, [pc, #136]	; (8000bac <controlTrafficLight+0x2cc>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2102      	movs	r1, #2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fcd4 	bl	80004d4 <update7SegBuffer>
	setTimer(0, BLINK_LED_TIME);
 8000b2c:	21fa      	movs	r1, #250	; 0xfa
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f7ff fe7c 	bl	800082c <setTimer>
	    time_counter_y = traffic_light_time_buffer[2];
	  }
	  update7SegBuffer(--time_counter_x, --time_counter_y);
	}
      }
      break;
 8000b34:	e14f      	b.n	8000dd6 <controlTrafficLight+0x4f6>
	if(timer_flag[2] == 1){
 8000b36:	4b1e      	ldr	r3, [pc, #120]	; (8000bb0 <controlTrafficLight+0x2d0>)
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	f040 814b 	bne.w	8000dd6 <controlTrafficLight+0x4f6>
	  setTimer(2, TRAFFIC_LIGHT_TIME);
 8000b40:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b44:	2002      	movs	r0, #2
 8000b46:	f7ff fe71 	bl	800082c <setTimer>
	  if(time_counter_x <= 0){
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <controlTrafficLight+0x2c4>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	dc0f      	bgt.n	8000b72 <controlTrafficLight+0x292>
	    traffic_light_state = RED_GREEN;
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <controlTrafficLight+0x2b8>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	701a      	strb	r2, [r3, #0]
	    activeTrafficLight();
 8000b58:	f000 faa2 	bl	80010a0 <activeTrafficLight>
	    traffic_light_display_state = XRED_YGREEN;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <controlTrafficLight+0x2bc>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]
	    time_counter_x = traffic_light_time_buffer[0];
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <controlTrafficLight+0x2c0>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a0f      	ldr	r2, [pc, #60]	; (8000ba4 <controlTrafficLight+0x2c4>)
 8000b68:	6013      	str	r3, [r2, #0]
	    time_counter_y = traffic_light_time_buffer[2];
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <controlTrafficLight+0x2c0>)
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ba8 <controlTrafficLight+0x2c8>)
 8000b70:	6013      	str	r3, [r2, #0]
	  update7SegBuffer(--time_counter_x, --time_counter_y);
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <controlTrafficLight+0x2c4>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	3b01      	subs	r3, #1
 8000b78:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <controlTrafficLight+0x2c4>)
 8000b7a:	6013      	str	r3, [r2, #0]
 8000b7c:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <controlTrafficLight+0x2c4>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <controlTrafficLight+0x2c8>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	3b01      	subs	r3, #1
 8000b86:	4908      	ldr	r1, [pc, #32]	; (8000ba8 <controlTrafficLight+0x2c8>)
 8000b88:	600b      	str	r3, [r1, #0]
 8000b8a:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <controlTrafficLight+0x2c8>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4610      	mov	r0, r2
 8000b92:	f7ff fc9f 	bl	80004d4 <update7SegBuffer>
      break;
 8000b96:	e11e      	b.n	8000dd6 <controlTrafficLight+0x4f6>
 8000b98:	200000b8 	.word	0x200000b8
 8000b9c:	200000b9 	.word	0x200000b9
 8000ba0:	2000005c 	.word	0x2000005c
 8000ba4:	20000138 	.word	0x20000138
 8000ba8:	20000134 	.word	0x20000134
 8000bac:	20000074 	.word	0x20000074
 8000bb0:	20000124 	.word	0x20000124
    case MODIFY_RED:
      if(isButtonPressed(0) == 1){
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f7ff fb45 	bl	8000244 <isButtonPressed>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d10c      	bne.n	8000bda <controlTrafficLight+0x2fa>
      	traffic_light_state = MODIFY_AMBER;
 8000bc0:	4b8a      	ldr	r3, [pc, #552]	; (8000dec <controlTrafficLight+0x50c>)
 8000bc2:	2206      	movs	r2, #6
 8000bc4:	701a      	strb	r2, [r3, #0]
      	traffic_light_display_state = AAMBER;
 8000bc6:	4b8a      	ldr	r3, [pc, #552]	; (8000df0 <controlTrafficLight+0x510>)
 8000bc8:	2205      	movs	r2, #5
 8000bca:	701a      	strb	r2, [r3, #0]
	update7SegBuffer(traffic_light_time_buffer_temp[1], 3);
 8000bcc:	4b89      	ldr	r3, [pc, #548]	; (8000df4 <controlTrafficLight+0x514>)
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	2103      	movs	r1, #3
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fc7e 	bl	80004d4 <update7SegBuffer>
	}
	if(isButtonPressed(2) == 1){
	  traffic_light_time_buffer_next[0] = traffic_light_time_buffer_temp[0];
	}
      }
      break;
 8000bd8:	e0ff      	b.n	8000dda <controlTrafficLight+0x4fa>
	if(timer_flag[0] == 1){
 8000bda:	4b87      	ldr	r3, [pc, #540]	; (8000df8 <controlTrafficLight+0x518>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d105      	bne.n	8000bee <controlTrafficLight+0x30e>
	  setTimer(0, BLINK_LED_TIME);
 8000be2:	21fa      	movs	r1, #250	; 0xfa
 8000be4:	2000      	movs	r0, #0
 8000be6:	f7ff fe21 	bl	800082c <setTimer>
	  toggleTrafficLight();
 8000bea:	f000 fa65 	bl	80010b8 <toggleTrafficLight>
	if(isButtonPressed(1) == 1){
 8000bee:	2001      	movs	r0, #1
 8000bf0:	f7ff fb28 	bl	8000244 <isButtonPressed>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d111      	bne.n	8000c1e <controlTrafficLight+0x33e>
	  ++traffic_light_time_buffer_temp[0];
 8000bfa:	4b7e      	ldr	r3, [pc, #504]	; (8000df4 <controlTrafficLight+0x514>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	4a7c      	ldr	r2, [pc, #496]	; (8000df4 <controlTrafficLight+0x514>)
 8000c02:	6013      	str	r3, [r2, #0]
	  if(traffic_light_time_buffer_temp[0] > TIME_STATE_MAX)
 8000c04:	4b7b      	ldr	r3, [pc, #492]	; (8000df4 <controlTrafficLight+0x514>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b63      	cmp	r3, #99	; 0x63
 8000c0a:	dd02      	ble.n	8000c12 <controlTrafficLight+0x332>
	    traffic_light_time_buffer_temp[0] = TIME_STATE_MIN;
 8000c0c:	4b79      	ldr	r3, [pc, #484]	; (8000df4 <controlTrafficLight+0x514>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	601a      	str	r2, [r3, #0]
	  update7SegBuffer(traffic_light_time_buffer_temp[0], 2);
 8000c12:	4b78      	ldr	r3, [pc, #480]	; (8000df4 <controlTrafficLight+0x514>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2102      	movs	r1, #2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fc5b 	bl	80004d4 <update7SegBuffer>
	if(isButtonPressed(2) == 1){
 8000c1e:	2002      	movs	r0, #2
 8000c20:	f7ff fb10 	bl	8000244 <isButtonPressed>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	f040 80d7 	bne.w	8000dda <controlTrafficLight+0x4fa>
	  traffic_light_time_buffer_next[0] = traffic_light_time_buffer_temp[0];
 8000c2c:	4b71      	ldr	r3, [pc, #452]	; (8000df4 <controlTrafficLight+0x514>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a72      	ldr	r2, [pc, #456]	; (8000dfc <controlTrafficLight+0x51c>)
 8000c32:	6013      	str	r3, [r2, #0]
      break;
 8000c34:	e0d1      	b.n	8000dda <controlTrafficLight+0x4fa>
    case MODIFY_AMBER:
      if(isButtonPressed(0) == 1){
 8000c36:	2000      	movs	r0, #0
 8000c38:	f7ff fb04 	bl	8000244 <isButtonPressed>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d10c      	bne.n	8000c5c <controlTrafficLight+0x37c>
      	traffic_light_state = MODIFY_GREEN;
 8000c42:	4b6a      	ldr	r3, [pc, #424]	; (8000dec <controlTrafficLight+0x50c>)
 8000c44:	2207      	movs	r2, #7
 8000c46:	701a      	strb	r2, [r3, #0]
      	traffic_light_display_state = AGREEN;
 8000c48:	4b69      	ldr	r3, [pc, #420]	; (8000df0 <controlTrafficLight+0x510>)
 8000c4a:	2206      	movs	r2, #6
 8000c4c:	701a      	strb	r2, [r3, #0]
	update7SegBuffer(traffic_light_time_buffer_temp[2], 4);
 8000c4e:	4b69      	ldr	r3, [pc, #420]	; (8000df4 <controlTrafficLight+0x514>)
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	2104      	movs	r1, #4
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fc3d 	bl	80004d4 <update7SegBuffer>
	}
	if(isButtonPressed(2) == 1){
	  traffic_light_time_buffer_next[1] = traffic_light_time_buffer_temp[1];
	}
      }
      break;
 8000c5a:	e0c0      	b.n	8000dde <controlTrafficLight+0x4fe>
	if(timer_flag[0] == 1){
 8000c5c:	4b66      	ldr	r3, [pc, #408]	; (8000df8 <controlTrafficLight+0x518>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d105      	bne.n	8000c70 <controlTrafficLight+0x390>
	  setTimer(0, BLINK_LED_TIME);
 8000c64:	21fa      	movs	r1, #250	; 0xfa
 8000c66:	2000      	movs	r0, #0
 8000c68:	f7ff fde0 	bl	800082c <setTimer>
	  toggleTrafficLight();
 8000c6c:	f000 fa24 	bl	80010b8 <toggleTrafficLight>
	if(isButtonPressed(1) == 1){
 8000c70:	2001      	movs	r0, #1
 8000c72:	f7ff fae7 	bl	8000244 <isButtonPressed>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d111      	bne.n	8000ca0 <controlTrafficLight+0x3c0>
	  ++traffic_light_time_buffer_temp[1];
 8000c7c:	4b5d      	ldr	r3, [pc, #372]	; (8000df4 <controlTrafficLight+0x514>)
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	3301      	adds	r3, #1
 8000c82:	4a5c      	ldr	r2, [pc, #368]	; (8000df4 <controlTrafficLight+0x514>)
 8000c84:	6053      	str	r3, [r2, #4]
	  if(traffic_light_time_buffer_temp[1] > TIME_STATE_MAX)
 8000c86:	4b5b      	ldr	r3, [pc, #364]	; (8000df4 <controlTrafficLight+0x514>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	2b63      	cmp	r3, #99	; 0x63
 8000c8c:	dd02      	ble.n	8000c94 <controlTrafficLight+0x3b4>
	    traffic_light_time_buffer_temp[1] = TIME_STATE_MIN;
 8000c8e:	4b59      	ldr	r3, [pc, #356]	; (8000df4 <controlTrafficLight+0x514>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	605a      	str	r2, [r3, #4]
	  update7SegBuffer(traffic_light_time_buffer_temp[1], 3);
 8000c94:	4b57      	ldr	r3, [pc, #348]	; (8000df4 <controlTrafficLight+0x514>)
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	2103      	movs	r1, #3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fc1a 	bl	80004d4 <update7SegBuffer>
	if(isButtonPressed(2) == 1){
 8000ca0:	2002      	movs	r0, #2
 8000ca2:	f7ff facf 	bl	8000244 <isButtonPressed>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	f040 8098 	bne.w	8000dde <controlTrafficLight+0x4fe>
	  traffic_light_time_buffer_next[1] = traffic_light_time_buffer_temp[1];
 8000cae:	4b51      	ldr	r3, [pc, #324]	; (8000df4 <controlTrafficLight+0x514>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	4a52      	ldr	r2, [pc, #328]	; (8000dfc <controlTrafficLight+0x51c>)
 8000cb4:	6053      	str	r3, [r2, #4]
      break;
 8000cb6:	e092      	b.n	8000dde <controlTrafficLight+0x4fe>
    case MODIFY_GREEN:
      if(isButtonPressed(0) == 1){
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f7ff fac3 	bl	8000244 <isButtonPressed>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d10a      	bne.n	8000cda <controlTrafficLight+0x3fa>
      	traffic_light_state = ERROR_CHECK;
 8000cc4:	4b49      	ldr	r3, [pc, #292]	; (8000dec <controlTrafficLight+0x50c>)
 8000cc6:	2208      	movs	r2, #8
 8000cc8:	701a      	strb	r2, [r3, #0]
      	traffic_light_display_state = AALL;
 8000cca:	4b49      	ldr	r3, [pc, #292]	; (8000df0 <controlTrafficLight+0x510>)
 8000ccc:	2207      	movs	r2, #7
 8000cce:	701a      	strb	r2, [r3, #0]
	update7SegBuffer(0, 0);
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f7ff fbfe 	bl	80004d4 <update7SegBuffer>
	}
	if(isButtonPressed(2) == 1){
	  traffic_light_time_buffer_next[2] = traffic_light_time_buffer_temp[2];
	}
      }
      break;
 8000cd8:	e083      	b.n	8000de2 <controlTrafficLight+0x502>
	if(timer_flag[0] == 1){
 8000cda:	4b47      	ldr	r3, [pc, #284]	; (8000df8 <controlTrafficLight+0x518>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d105      	bne.n	8000cee <controlTrafficLight+0x40e>
	  setTimer(0, BLINK_LED_TIME);
 8000ce2:	21fa      	movs	r1, #250	; 0xfa
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f7ff fda1 	bl	800082c <setTimer>
	  toggleTrafficLight();
 8000cea:	f000 f9e5 	bl	80010b8 <toggleTrafficLight>
	if(isButtonPressed(1) == 1){
 8000cee:	2001      	movs	r0, #1
 8000cf0:	f7ff faa8 	bl	8000244 <isButtonPressed>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d111      	bne.n	8000d1e <controlTrafficLight+0x43e>
	  ++traffic_light_time_buffer_temp[2];
 8000cfa:	4b3e      	ldr	r3, [pc, #248]	; (8000df4 <controlTrafficLight+0x514>)
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	4a3c      	ldr	r2, [pc, #240]	; (8000df4 <controlTrafficLight+0x514>)
 8000d02:	6093      	str	r3, [r2, #8]
	  if(traffic_light_time_buffer_temp[2] > TIME_STATE_MAX)
 8000d04:	4b3b      	ldr	r3, [pc, #236]	; (8000df4 <controlTrafficLight+0x514>)
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	2b63      	cmp	r3, #99	; 0x63
 8000d0a:	dd02      	ble.n	8000d12 <controlTrafficLight+0x432>
	    traffic_light_time_buffer_temp[2] = TIME_STATE_MIN;
 8000d0c:	4b39      	ldr	r3, [pc, #228]	; (8000df4 <controlTrafficLight+0x514>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	609a      	str	r2, [r3, #8]
	  update7SegBuffer(traffic_light_time_buffer_temp[2], 4);
 8000d12:	4b38      	ldr	r3, [pc, #224]	; (8000df4 <controlTrafficLight+0x514>)
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	2104      	movs	r1, #4
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fbdb 	bl	80004d4 <update7SegBuffer>
	if(isButtonPressed(2) == 1){
 8000d1e:	2002      	movs	r0, #2
 8000d20:	f7ff fa90 	bl	8000244 <isButtonPressed>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d15b      	bne.n	8000de2 <controlTrafficLight+0x502>
	  traffic_light_time_buffer_next[2] = traffic_light_time_buffer_temp[2];
 8000d2a:	4b32      	ldr	r3, [pc, #200]	; (8000df4 <controlTrafficLight+0x514>)
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	4a33      	ldr	r2, [pc, #204]	; (8000dfc <controlTrafficLight+0x51c>)
 8000d30:	6093      	str	r3, [r2, #8]
      break;
 8000d32:	e056      	b.n	8000de2 <controlTrafficLight+0x502>
    case ERROR_CHECK:
      if(traffic_light_time_buffer_next[0] == traffic_light_time_buffer[1] + traffic_light_time_buffer[2]){
 8000d34:	4b31      	ldr	r3, [pc, #196]	; (8000dfc <controlTrafficLight+0x51c>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4b31      	ldr	r3, [pc, #196]	; (8000e00 <controlTrafficLight+0x520>)
 8000d3a:	6859      	ldr	r1, [r3, #4]
 8000d3c:	4b30      	ldr	r3, [pc, #192]	; (8000e00 <controlTrafficLight+0x520>)
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	440b      	add	r3, r1
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d10b      	bne.n	8000d5e <controlTrafficLight+0x47e>
	traffic_light_time_buffer[0] = traffic_light_time_buffer_next[0];
 8000d46:	4b2d      	ldr	r3, [pc, #180]	; (8000dfc <controlTrafficLight+0x51c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a2d      	ldr	r2, [pc, #180]	; (8000e00 <controlTrafficLight+0x520>)
 8000d4c:	6013      	str	r3, [r2, #0]
	traffic_light_time_buffer[1] = traffic_light_time_buffer_next[1];
 8000d4e:	4b2b      	ldr	r3, [pc, #172]	; (8000dfc <controlTrafficLight+0x51c>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	4a2b      	ldr	r2, [pc, #172]	; (8000e00 <controlTrafficLight+0x520>)
 8000d54:	6053      	str	r3, [r2, #4]
	traffic_light_time_buffer[2] = traffic_light_time_buffer_next[2];
 8000d56:	4b29      	ldr	r3, [pc, #164]	; (8000dfc <controlTrafficLight+0x51c>)
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	4a29      	ldr	r2, [pc, #164]	; (8000e00 <controlTrafficLight+0x520>)
 8000d5c:	6093      	str	r3, [r2, #8]
      }
      traffic_light_time_buffer_temp[0] = traffic_light_time_buffer[0];
 8000d5e:	4b28      	ldr	r3, [pc, #160]	; (8000e00 <controlTrafficLight+0x520>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a24      	ldr	r2, [pc, #144]	; (8000df4 <controlTrafficLight+0x514>)
 8000d64:	6013      	str	r3, [r2, #0]
      traffic_light_time_buffer_temp[1] = traffic_light_time_buffer[1];
 8000d66:	4b26      	ldr	r3, [pc, #152]	; (8000e00 <controlTrafficLight+0x520>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	4a22      	ldr	r2, [pc, #136]	; (8000df4 <controlTrafficLight+0x514>)
 8000d6c:	6053      	str	r3, [r2, #4]
      traffic_light_time_buffer_temp[2] = traffic_light_time_buffer[2];
 8000d6e:	4b24      	ldr	r3, [pc, #144]	; (8000e00 <controlTrafficLight+0x520>)
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	4a20      	ldr	r2, [pc, #128]	; (8000df4 <controlTrafficLight+0x514>)
 8000d74:	6093      	str	r3, [r2, #8]
      traffic_light_state = RED_GREEN;
 8000d76:	4b1d      	ldr	r3, [pc, #116]	; (8000dec <controlTrafficLight+0x50c>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	701a      	strb	r2, [r3, #0]
      activeTrafficLight();
 8000d7c:	f000 f990 	bl	80010a0 <activeTrafficLight>
      traffic_light_display_state = XRED_YGREEN;
 8000d80:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <controlTrafficLight+0x510>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
      time_counter_x = traffic_light_time_buffer[0];
 8000d86:	4b1e      	ldr	r3, [pc, #120]	; (8000e00 <controlTrafficLight+0x520>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a1e      	ldr	r2, [pc, #120]	; (8000e04 <controlTrafficLight+0x524>)
 8000d8c:	6013      	str	r3, [r2, #0]
      time_counter_y = traffic_light_time_buffer[2];
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <controlTrafficLight+0x520>)
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	4a1d      	ldr	r2, [pc, #116]	; (8000e08 <controlTrafficLight+0x528>)
 8000d94:	6013      	str	r3, [r2, #0]
      update7SegBuffer(--time_counter_x, --time_counter_y);
 8000d96:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <controlTrafficLight+0x524>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	4a19      	ldr	r2, [pc, #100]	; (8000e04 <controlTrafficLight+0x524>)
 8000d9e:	6013      	str	r3, [r2, #0]
 8000da0:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <controlTrafficLight+0x524>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <controlTrafficLight+0x528>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	3b01      	subs	r3, #1
 8000daa:	4917      	ldr	r1, [pc, #92]	; (8000e08 <controlTrafficLight+0x528>)
 8000dac:	600b      	str	r3, [r1, #0]
 8000dae:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <controlTrafficLight+0x528>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4619      	mov	r1, r3
 8000db4:	4610      	mov	r0, r2
 8000db6:	f7ff fb8d 	bl	80004d4 <update7SegBuffer>
      setTimer(2, TRAFFIC_LIGHT_TIME);
 8000dba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000dbe:	2002      	movs	r0, #2
 8000dc0:	f7ff fd34 	bl	800082c <setTimer>
      break;
 8000dc4:	e00e      	b.n	8000de4 <controlTrafficLight+0x504>
    default:
      break;
 8000dc6:	bf00      	nop
 8000dc8:	e00c      	b.n	8000de4 <controlTrafficLight+0x504>
      break;
 8000dca:	bf00      	nop
 8000dcc:	e00a      	b.n	8000de4 <controlTrafficLight+0x504>
      break;
 8000dce:	bf00      	nop
 8000dd0:	e008      	b.n	8000de4 <controlTrafficLight+0x504>
      break;
 8000dd2:	bf00      	nop
 8000dd4:	e006      	b.n	8000de4 <controlTrafficLight+0x504>
      break;
 8000dd6:	bf00      	nop
 8000dd8:	e004      	b.n	8000de4 <controlTrafficLight+0x504>
      break;
 8000dda:	bf00      	nop
 8000ddc:	e002      	b.n	8000de4 <controlTrafficLight+0x504>
      break;
 8000dde:	bf00      	nop
 8000de0:	e000      	b.n	8000de4 <controlTrafficLight+0x504>
      break;
 8000de2:	bf00      	nop
  }
  displayTrafficLight();
 8000de4:	f000 f812 	bl	8000e0c <displayTrafficLight>
}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	200000b8 	.word	0x200000b8
 8000df0:	200000b9 	.word	0x200000b9
 8000df4:	20000074 	.word	0x20000074
 8000df8:	20000124 	.word	0x20000124
 8000dfc:	20000068 	.word	0x20000068
 8000e00:	2000005c 	.word	0x2000005c
 8000e04:	20000138 	.word	0x20000138
 8000e08:	20000134 	.word	0x20000134

08000e0c <displayTrafficLight>:

#include "traffic_light_display.h"

TrafficLightDisplayState traffic_light_display_state = XRED_YGREEN;

void displayTrafficLight(){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  switch (traffic_light_display_state) {
 8000e10:	4ba1      	ldr	r3, [pc, #644]	; (8001098 <displayTrafficLight+0x28c>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b07      	cmp	r3, #7
 8000e16:	f200 813b 	bhi.w	8001090 <displayTrafficLight+0x284>
 8000e1a:	a201      	add	r2, pc, #4	; (adr r2, 8000e20 <displayTrafficLight+0x14>)
 8000e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e20:	08000e41 	.word	0x08000e41
 8000e24:	08000e8b 	.word	0x08000e8b
 8000e28:	08000ed5 	.word	0x08000ed5
 8000e2c:	08000f1f 	.word	0x08000f1f
 8000e30:	08000f69 	.word	0x08000f69
 8000e34:	08000fb3 	.word	0x08000fb3
 8000e38:	08000ffd 	.word	0x08000ffd
 8000e3c:	08001047 	.word	0x08001047
    case XRED_YGREEN:
      HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, GPIO_PIN_RESET);
 8000e40:	2200      	movs	r2, #0
 8000e42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e46:	4895      	ldr	r0, [pc, #596]	; (800109c <displayTrafficLight+0x290>)
 8000e48:	f000 fc69 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_AMBER_X_GPIO_Port, LED_AMBER_X_Pin, GPIO_PIN_SET);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e52:	4892      	ldr	r0, [pc, #584]	; (800109c <displayTrafficLight+0x290>)
 8000e54:	f000 fc63 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin, GPIO_PIN_SET);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e5e:	488f      	ldr	r0, [pc, #572]	; (800109c <displayTrafficLight+0x290>)
 8000e60:	f000 fc5d 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, GPIO_PIN_SET);
 8000e64:	2201      	movs	r2, #1
 8000e66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e6a:	488c      	ldr	r0, [pc, #560]	; (800109c <displayTrafficLight+0x290>)
 8000e6c:	f000 fc57 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_AMBER_Y_GPIO_Port, LED_AMBER_Y_Pin, GPIO_PIN_SET);
 8000e70:	2201      	movs	r2, #1
 8000e72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e76:	4889      	ldr	r0, [pc, #548]	; (800109c <displayTrafficLight+0x290>)
 8000e78:	f000 fc51 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin, GPIO_PIN_RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e82:	4886      	ldr	r0, [pc, #536]	; (800109c <displayTrafficLight+0x290>)
 8000e84:	f000 fc4b 	bl	800171e <HAL_GPIO_WritePin>
      break;
 8000e88:	e103      	b.n	8001092 <displayTrafficLight+0x286>
    case XRED_YAMBER:
      HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e90:	4882      	ldr	r0, [pc, #520]	; (800109c <displayTrafficLight+0x290>)
 8000e92:	f000 fc44 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_AMBER_X_GPIO_Port, LED_AMBER_X_Pin, GPIO_PIN_SET);
 8000e96:	2201      	movs	r2, #1
 8000e98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e9c:	487f      	ldr	r0, [pc, #508]	; (800109c <displayTrafficLight+0x290>)
 8000e9e:	f000 fc3e 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin, GPIO_PIN_SET);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ea8:	487c      	ldr	r0, [pc, #496]	; (800109c <displayTrafficLight+0x290>)
 8000eaa:	f000 fc38 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, GPIO_PIN_SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eb4:	4879      	ldr	r0, [pc, #484]	; (800109c <displayTrafficLight+0x290>)
 8000eb6:	f000 fc32 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_AMBER_Y_GPIO_Port, LED_AMBER_Y_Pin, GPIO_PIN_RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ec0:	4876      	ldr	r0, [pc, #472]	; (800109c <displayTrafficLight+0x290>)
 8000ec2:	f000 fc2c 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin, GPIO_PIN_SET);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ecc:	4873      	ldr	r0, [pc, #460]	; (800109c <displayTrafficLight+0x290>)
 8000ece:	f000 fc26 	bl	800171e <HAL_GPIO_WritePin>
      break;
 8000ed2:	e0de      	b.n	8001092 <displayTrafficLight+0x286>
    case XGREEN_YRED:
      HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, GPIO_PIN_SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eda:	4870      	ldr	r0, [pc, #448]	; (800109c <displayTrafficLight+0x290>)
 8000edc:	f000 fc1f 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_AMBER_X_GPIO_Port, LED_AMBER_X_Pin, GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee6:	486d      	ldr	r0, [pc, #436]	; (800109c <displayTrafficLight+0x290>)
 8000ee8:	f000 fc19 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin, GPIO_PIN_RESET);
 8000eec:	2200      	movs	r2, #0
 8000eee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ef2:	486a      	ldr	r0, [pc, #424]	; (800109c <displayTrafficLight+0x290>)
 8000ef4:	f000 fc13 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, GPIO_PIN_RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000efe:	4867      	ldr	r0, [pc, #412]	; (800109c <displayTrafficLight+0x290>)
 8000f00:	f000 fc0d 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_AMBER_Y_GPIO_Port, LED_AMBER_Y_Pin, GPIO_PIN_SET);
 8000f04:	2201      	movs	r2, #1
 8000f06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f0a:	4864      	ldr	r0, [pc, #400]	; (800109c <displayTrafficLight+0x290>)
 8000f0c:	f000 fc07 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin, GPIO_PIN_SET);
 8000f10:	2201      	movs	r2, #1
 8000f12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f16:	4861      	ldr	r0, [pc, #388]	; (800109c <displayTrafficLight+0x290>)
 8000f18:	f000 fc01 	bl	800171e <HAL_GPIO_WritePin>
      break;
 8000f1c:	e0b9      	b.n	8001092 <displayTrafficLight+0x286>
    case XAMBER_YRED:
      HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, GPIO_PIN_SET);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f24:	485d      	ldr	r0, [pc, #372]	; (800109c <displayTrafficLight+0x290>)
 8000f26:	f000 fbfa 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_AMBER_X_GPIO_Port, LED_AMBER_X_Pin, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f30:	485a      	ldr	r0, [pc, #360]	; (800109c <displayTrafficLight+0x290>)
 8000f32:	f000 fbf4 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin, GPIO_PIN_SET);
 8000f36:	2201      	movs	r2, #1
 8000f38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f3c:	4857      	ldr	r0, [pc, #348]	; (800109c <displayTrafficLight+0x290>)
 8000f3e:	f000 fbee 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, GPIO_PIN_RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f48:	4854      	ldr	r0, [pc, #336]	; (800109c <displayTrafficLight+0x290>)
 8000f4a:	f000 fbe8 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_AMBER_Y_GPIO_Port, LED_AMBER_Y_Pin, GPIO_PIN_SET);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f54:	4851      	ldr	r0, [pc, #324]	; (800109c <displayTrafficLight+0x290>)
 8000f56:	f000 fbe2 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin, GPIO_PIN_SET);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f60:	484e      	ldr	r0, [pc, #312]	; (800109c <displayTrafficLight+0x290>)
 8000f62:	f000 fbdc 	bl	800171e <HAL_GPIO_WritePin>
      break;
 8000f66:	e094      	b.n	8001092 <displayTrafficLight+0x286>
    case ARED:
      HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, GPIO_PIN_RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f6e:	484b      	ldr	r0, [pc, #300]	; (800109c <displayTrafficLight+0x290>)
 8000f70:	f000 fbd5 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_AMBER_X_GPIO_Port, LED_AMBER_X_Pin, GPIO_PIN_SET);
 8000f74:	2201      	movs	r2, #1
 8000f76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f7a:	4848      	ldr	r0, [pc, #288]	; (800109c <displayTrafficLight+0x290>)
 8000f7c:	f000 fbcf 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin, GPIO_PIN_SET);
 8000f80:	2201      	movs	r2, #1
 8000f82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f86:	4845      	ldr	r0, [pc, #276]	; (800109c <displayTrafficLight+0x290>)
 8000f88:	f000 fbc9 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f92:	4842      	ldr	r0, [pc, #264]	; (800109c <displayTrafficLight+0x290>)
 8000f94:	f000 fbc3 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_AMBER_Y_GPIO_Port, LED_AMBER_Y_Pin, GPIO_PIN_SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f9e:	483f      	ldr	r0, [pc, #252]	; (800109c <displayTrafficLight+0x290>)
 8000fa0:	f000 fbbd 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin, GPIO_PIN_SET);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000faa:	483c      	ldr	r0, [pc, #240]	; (800109c <displayTrafficLight+0x290>)
 8000fac:	f000 fbb7 	bl	800171e <HAL_GPIO_WritePin>
      break;
 8000fb0:	e06f      	b.n	8001092 <displayTrafficLight+0x286>
    case AAMBER:
      HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, GPIO_PIN_SET);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb8:	4838      	ldr	r0, [pc, #224]	; (800109c <displayTrafficLight+0x290>)
 8000fba:	f000 fbb0 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_AMBER_X_GPIO_Port, LED_AMBER_X_Pin, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fc4:	4835      	ldr	r0, [pc, #212]	; (800109c <displayTrafficLight+0x290>)
 8000fc6:	f000 fbaa 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin, GPIO_PIN_SET);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fd0:	4832      	ldr	r0, [pc, #200]	; (800109c <displayTrafficLight+0x290>)
 8000fd2:	f000 fba4 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, GPIO_PIN_SET);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fdc:	482f      	ldr	r0, [pc, #188]	; (800109c <displayTrafficLight+0x290>)
 8000fde:	f000 fb9e 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_AMBER_Y_GPIO_Port, LED_AMBER_Y_Pin, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fe8:	482c      	ldr	r0, [pc, #176]	; (800109c <displayTrafficLight+0x290>)
 8000fea:	f000 fb98 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin, GPIO_PIN_SET);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ff4:	4829      	ldr	r0, [pc, #164]	; (800109c <displayTrafficLight+0x290>)
 8000ff6:	f000 fb92 	bl	800171e <HAL_GPIO_WritePin>
      break;
 8000ffa:	e04a      	b.n	8001092 <displayTrafficLight+0x286>
    case AGREEN:
      HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, GPIO_PIN_SET);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001002:	4826      	ldr	r0, [pc, #152]	; (800109c <displayTrafficLight+0x290>)
 8001004:	f000 fb8b 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_AMBER_X_GPIO_Port, LED_AMBER_X_Pin, GPIO_PIN_SET);
 8001008:	2201      	movs	r2, #1
 800100a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800100e:	4823      	ldr	r0, [pc, #140]	; (800109c <displayTrafficLight+0x290>)
 8001010:	f000 fb85 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin, GPIO_PIN_RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800101a:	4820      	ldr	r0, [pc, #128]	; (800109c <displayTrafficLight+0x290>)
 800101c:	f000 fb7f 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, GPIO_PIN_SET);
 8001020:	2201      	movs	r2, #1
 8001022:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001026:	481d      	ldr	r0, [pc, #116]	; (800109c <displayTrafficLight+0x290>)
 8001028:	f000 fb79 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_AMBER_Y_GPIO_Port, LED_AMBER_Y_Pin, GPIO_PIN_SET);
 800102c:	2201      	movs	r2, #1
 800102e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001032:	481a      	ldr	r0, [pc, #104]	; (800109c <displayTrafficLight+0x290>)
 8001034:	f000 fb73 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800103e:	4817      	ldr	r0, [pc, #92]	; (800109c <displayTrafficLight+0x290>)
 8001040:	f000 fb6d 	bl	800171e <HAL_GPIO_WritePin>
      break;
 8001044:	e025      	b.n	8001092 <displayTrafficLight+0x286>
    case AALL:
      HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	f44f 7180 	mov.w	r1, #256	; 0x100
 800104c:	4813      	ldr	r0, [pc, #76]	; (800109c <displayTrafficLight+0x290>)
 800104e:	f000 fb66 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_AMBER_X_GPIO_Port, LED_AMBER_X_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001058:	4810      	ldr	r0, [pc, #64]	; (800109c <displayTrafficLight+0x290>)
 800105a:	f000 fb60 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001064:	480d      	ldr	r0, [pc, #52]	; (800109c <displayTrafficLight+0x290>)
 8001066:	f000 fb5a 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001070:	480a      	ldr	r0, [pc, #40]	; (800109c <displayTrafficLight+0x290>)
 8001072:	f000 fb54 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_AMBER_Y_GPIO_Port, LED_AMBER_Y_Pin, GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800107c:	4807      	ldr	r0, [pc, #28]	; (800109c <displayTrafficLight+0x290>)
 800107e:	f000 fb4e 	bl	800171e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin, GPIO_PIN_RESET);
 8001082:	2200      	movs	r2, #0
 8001084:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001088:	4804      	ldr	r0, [pc, #16]	; (800109c <displayTrafficLight+0x290>)
 800108a:	f000 fb48 	bl	800171e <HAL_GPIO_WritePin>
      break;
 800108e:	e000      	b.n	8001092 <displayTrafficLight+0x286>
    default:
      break;
 8001090:	bf00      	nop
  }
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200000b9 	.word	0x200000b9
 800109c:	40010c00 	.word	0x40010c00

080010a0 <activeTrafficLight>:
void activeTrafficLight(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(EN_TL_GPIO_Port, EN_TL_Pin, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010aa:	4802      	ldr	r0, [pc, #8]	; (80010b4 <activeTrafficLight+0x14>)
 80010ac:	f000 fb37 	bl	800171e <HAL_GPIO_WritePin>
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40010800 	.word	0x40010800

080010b8 <toggleTrafficLight>:
void toggleTrafficLight(){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(EN_TL_GPIO_Port, EN_TL_Pin);
 80010bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <toggleTrafficLight+0x14>)
 80010c2:	f000 fb44 	bl	800174e <HAL_GPIO_TogglePin>
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40010800 	.word	0x40010800

080010d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010d0:	f7ff fb90 	bl	80007f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d4:	480b      	ldr	r0, [pc, #44]	; (8001104 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010d6:	490c      	ldr	r1, [pc, #48]	; (8001108 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010d8:	4a0c      	ldr	r2, [pc, #48]	; (800110c <LoopFillZerobss+0x16>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010dc:	e002      	b.n	80010e4 <LoopCopyDataInit>

080010de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e2:	3304      	adds	r3, #4

080010e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e8:	d3f9      	bcc.n	80010de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ea:	4a09      	ldr	r2, [pc, #36]	; (8001110 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010ec:	4c09      	ldr	r4, [pc, #36]	; (8001114 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f0:	e001      	b.n	80010f6 <LoopFillZerobss>

080010f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f4:	3204      	adds	r2, #4

080010f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f8:	d3fb      	bcc.n	80010f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010fa:	f001 fb05 	bl	8002708 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010fe:	f7ff f8bb 	bl	8000278 <main>
  bx lr
 8001102:	4770      	bx	lr
  ldr r0, =_sdata
 8001104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001108:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800110c:	080027ac 	.word	0x080027ac
  ldr r2, =_sbss
 8001110:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001114:	20000140 	.word	0x20000140

08001118 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001118:	e7fe      	b.n	8001118 <ADC1_2_IRQHandler>
	...

0800111c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <HAL_Init+0x28>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a07      	ldr	r2, [pc, #28]	; (8001144 <HAL_Init+0x28>)
 8001126:	f043 0310 	orr.w	r3, r3, #16
 800112a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800112c:	2003      	movs	r0, #3
 800112e:	f000 f923 	bl	8001378 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001132:	200f      	movs	r0, #15
 8001134:	f000 f808 	bl	8001148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001138:	f7ff fad4 	bl	80006e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40022000 	.word	0x40022000

08001148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_InitTick+0x54>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_InitTick+0x58>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001162:	fbb2 f3f3 	udiv	r3, r2, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f93b 	bl	80013e2 <HAL_SYSTICK_Config>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e00e      	b.n	8001194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b0f      	cmp	r3, #15
 800117a:	d80a      	bhi.n	8001192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800117c:	2200      	movs	r2, #0
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	f04f 30ff 	mov.w	r0, #4294967295
 8001184:	f000 f903 	bl	800138e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001188:	4a06      	ldr	r2, [pc, #24]	; (80011a4 <HAL_InitTick+0x5c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	e000      	b.n	8001194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000058 	.word	0x20000058
 80011a0:	20000084 	.word	0x20000084
 80011a4:	20000080 	.word	0x20000080

080011a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <HAL_IncTick+0x1c>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <HAL_IncTick+0x20>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	4a03      	ldr	r2, [pc, #12]	; (80011c8 <HAL_IncTick+0x20>)
 80011ba:	6013      	str	r3, [r2, #0]
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr
 80011c4:	20000084 	.word	0x20000084
 80011c8:	2000013c 	.word	0x2000013c

080011cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return uwTick;
 80011d0:	4b02      	ldr	r3, [pc, #8]	; (80011dc <HAL_GetTick+0x10>)
 80011d2:	681b      	ldr	r3, [r3, #0]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr
 80011dc:	2000013c 	.word	0x2000013c

080011e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011fc:	4013      	ands	r3, r2
 80011fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800120c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001212:	4a04      	ldr	r2, [pc, #16]	; (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	60d3      	str	r3, [r2, #12]
}
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <__NVIC_GetPriorityGrouping+0x18>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	f003 0307 	and.w	r3, r3, #7
}
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	2b00      	cmp	r3, #0
 8001254:	db0b      	blt.n	800126e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	f003 021f 	and.w	r2, r3, #31
 800125c:	4906      	ldr	r1, [pc, #24]	; (8001278 <__NVIC_EnableIRQ+0x34>)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	095b      	lsrs	r3, r3, #5
 8001264:	2001      	movs	r0, #1
 8001266:	fa00 f202 	lsl.w	r2, r0, r2
 800126a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr
 8001278:	e000e100 	.word	0xe000e100

0800127c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	6039      	str	r1, [r7, #0]
 8001286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	2b00      	cmp	r3, #0
 800128e:	db0a      	blt.n	80012a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	b2da      	uxtb	r2, r3
 8001294:	490c      	ldr	r1, [pc, #48]	; (80012c8 <__NVIC_SetPriority+0x4c>)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	0112      	lsls	r2, r2, #4
 800129c:	b2d2      	uxtb	r2, r2
 800129e:	440b      	add	r3, r1
 80012a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a4:	e00a      	b.n	80012bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4908      	ldr	r1, [pc, #32]	; (80012cc <__NVIC_SetPriority+0x50>)
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	f003 030f 	and.w	r3, r3, #15
 80012b2:	3b04      	subs	r3, #4
 80012b4:	0112      	lsls	r2, r2, #4
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	440b      	add	r3, r1
 80012ba:	761a      	strb	r2, [r3, #24]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000e100 	.word	0xe000e100
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b089      	sub	sp, #36	; 0x24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	f1c3 0307 	rsb	r3, r3, #7
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	bf28      	it	cs
 80012ee:	2304      	movcs	r3, #4
 80012f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3304      	adds	r3, #4
 80012f6:	2b06      	cmp	r3, #6
 80012f8:	d902      	bls.n	8001300 <NVIC_EncodePriority+0x30>
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3b03      	subs	r3, #3
 80012fe:	e000      	b.n	8001302 <NVIC_EncodePriority+0x32>
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001304:	f04f 32ff 	mov.w	r2, #4294967295
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43da      	mvns	r2, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	401a      	ands	r2, r3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001318:	f04f 31ff 	mov.w	r1, #4294967295
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa01 f303 	lsl.w	r3, r1, r3
 8001322:	43d9      	mvns	r1, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	4313      	orrs	r3, r2
         );
}
 800132a:	4618      	mov	r0, r3
 800132c:	3724      	adds	r7, #36	; 0x24
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr

08001334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3b01      	subs	r3, #1
 8001340:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001344:	d301      	bcc.n	800134a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001346:	2301      	movs	r3, #1
 8001348:	e00f      	b.n	800136a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800134a:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <SysTick_Config+0x40>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3b01      	subs	r3, #1
 8001350:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001352:	210f      	movs	r1, #15
 8001354:	f04f 30ff 	mov.w	r0, #4294967295
 8001358:	f7ff ff90 	bl	800127c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <SysTick_Config+0x40>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001362:	4b04      	ldr	r3, [pc, #16]	; (8001374 <SysTick_Config+0x40>)
 8001364:	2207      	movs	r2, #7
 8001366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	e000e010 	.word	0xe000e010

08001378 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ff2d 	bl	80011e0 <__NVIC_SetPriorityGrouping>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800138e:	b580      	push	{r7, lr}
 8001390:	b086      	sub	sp, #24
 8001392:	af00      	add	r7, sp, #0
 8001394:	4603      	mov	r3, r0
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
 800139a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a0:	f7ff ff42 	bl	8001228 <__NVIC_GetPriorityGrouping>
 80013a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	68b9      	ldr	r1, [r7, #8]
 80013aa:	6978      	ldr	r0, [r7, #20]
 80013ac:	f7ff ff90 	bl	80012d0 <NVIC_EncodePriority>
 80013b0:	4602      	mov	r2, r0
 80013b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b6:	4611      	mov	r1, r2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff5f 	bl	800127c <__NVIC_SetPriority>
}
 80013be:	bf00      	nop
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4603      	mov	r3, r0
 80013ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff35 	bl	8001244 <__NVIC_EnableIRQ>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff ffa2 	bl	8001334 <SysTick_Config>
 80013f0:	4603      	mov	r3, r0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b08b      	sub	sp, #44	; 0x2c
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001406:	2300      	movs	r3, #0
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800140a:	2300      	movs	r3, #0
 800140c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800140e:	e148      	b.n	80016a2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001410:	2201      	movs	r2, #1
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	69fa      	ldr	r2, [r7, #28]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	429a      	cmp	r2, r3
 800142a:	f040 8137 	bne.w	800169c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	4aa3      	ldr	r2, [pc, #652]	; (80016c0 <HAL_GPIO_Init+0x2c4>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d05e      	beq.n	80014f6 <HAL_GPIO_Init+0xfa>
 8001438:	4aa1      	ldr	r2, [pc, #644]	; (80016c0 <HAL_GPIO_Init+0x2c4>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d875      	bhi.n	800152a <HAL_GPIO_Init+0x12e>
 800143e:	4aa1      	ldr	r2, [pc, #644]	; (80016c4 <HAL_GPIO_Init+0x2c8>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d058      	beq.n	80014f6 <HAL_GPIO_Init+0xfa>
 8001444:	4a9f      	ldr	r2, [pc, #636]	; (80016c4 <HAL_GPIO_Init+0x2c8>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d86f      	bhi.n	800152a <HAL_GPIO_Init+0x12e>
 800144a:	4a9f      	ldr	r2, [pc, #636]	; (80016c8 <HAL_GPIO_Init+0x2cc>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d052      	beq.n	80014f6 <HAL_GPIO_Init+0xfa>
 8001450:	4a9d      	ldr	r2, [pc, #628]	; (80016c8 <HAL_GPIO_Init+0x2cc>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d869      	bhi.n	800152a <HAL_GPIO_Init+0x12e>
 8001456:	4a9d      	ldr	r2, [pc, #628]	; (80016cc <HAL_GPIO_Init+0x2d0>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d04c      	beq.n	80014f6 <HAL_GPIO_Init+0xfa>
 800145c:	4a9b      	ldr	r2, [pc, #620]	; (80016cc <HAL_GPIO_Init+0x2d0>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d863      	bhi.n	800152a <HAL_GPIO_Init+0x12e>
 8001462:	4a9b      	ldr	r2, [pc, #620]	; (80016d0 <HAL_GPIO_Init+0x2d4>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d046      	beq.n	80014f6 <HAL_GPIO_Init+0xfa>
 8001468:	4a99      	ldr	r2, [pc, #612]	; (80016d0 <HAL_GPIO_Init+0x2d4>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d85d      	bhi.n	800152a <HAL_GPIO_Init+0x12e>
 800146e:	2b12      	cmp	r3, #18
 8001470:	d82a      	bhi.n	80014c8 <HAL_GPIO_Init+0xcc>
 8001472:	2b12      	cmp	r3, #18
 8001474:	d859      	bhi.n	800152a <HAL_GPIO_Init+0x12e>
 8001476:	a201      	add	r2, pc, #4	; (adr r2, 800147c <HAL_GPIO_Init+0x80>)
 8001478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800147c:	080014f7 	.word	0x080014f7
 8001480:	080014d1 	.word	0x080014d1
 8001484:	080014e3 	.word	0x080014e3
 8001488:	08001525 	.word	0x08001525
 800148c:	0800152b 	.word	0x0800152b
 8001490:	0800152b 	.word	0x0800152b
 8001494:	0800152b 	.word	0x0800152b
 8001498:	0800152b 	.word	0x0800152b
 800149c:	0800152b 	.word	0x0800152b
 80014a0:	0800152b 	.word	0x0800152b
 80014a4:	0800152b 	.word	0x0800152b
 80014a8:	0800152b 	.word	0x0800152b
 80014ac:	0800152b 	.word	0x0800152b
 80014b0:	0800152b 	.word	0x0800152b
 80014b4:	0800152b 	.word	0x0800152b
 80014b8:	0800152b 	.word	0x0800152b
 80014bc:	0800152b 	.word	0x0800152b
 80014c0:	080014d9 	.word	0x080014d9
 80014c4:	080014ed 	.word	0x080014ed
 80014c8:	4a82      	ldr	r2, [pc, #520]	; (80016d4 <HAL_GPIO_Init+0x2d8>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d013      	beq.n	80014f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014ce:	e02c      	b.n	800152a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	623b      	str	r3, [r7, #32]
          break;
 80014d6:	e029      	b.n	800152c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	3304      	adds	r3, #4
 80014de:	623b      	str	r3, [r7, #32]
          break;
 80014e0:	e024      	b.n	800152c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	3308      	adds	r3, #8
 80014e8:	623b      	str	r3, [r7, #32]
          break;
 80014ea:	e01f      	b.n	800152c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	330c      	adds	r3, #12
 80014f2:	623b      	str	r3, [r7, #32]
          break;
 80014f4:	e01a      	b.n	800152c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d102      	bne.n	8001504 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014fe:	2304      	movs	r3, #4
 8001500:	623b      	str	r3, [r7, #32]
          break;
 8001502:	e013      	b.n	800152c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d105      	bne.n	8001518 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800150c:	2308      	movs	r3, #8
 800150e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	69fa      	ldr	r2, [r7, #28]
 8001514:	611a      	str	r2, [r3, #16]
          break;
 8001516:	e009      	b.n	800152c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001518:	2308      	movs	r3, #8
 800151a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69fa      	ldr	r2, [r7, #28]
 8001520:	615a      	str	r2, [r3, #20]
          break;
 8001522:	e003      	b.n	800152c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001524:	2300      	movs	r3, #0
 8001526:	623b      	str	r3, [r7, #32]
          break;
 8001528:	e000      	b.n	800152c <HAL_GPIO_Init+0x130>
          break;
 800152a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	2bff      	cmp	r3, #255	; 0xff
 8001530:	d801      	bhi.n	8001536 <HAL_GPIO_Init+0x13a>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	e001      	b.n	800153a <HAL_GPIO_Init+0x13e>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	3304      	adds	r3, #4
 800153a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	2bff      	cmp	r3, #255	; 0xff
 8001540:	d802      	bhi.n	8001548 <HAL_GPIO_Init+0x14c>
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	e002      	b.n	800154e <HAL_GPIO_Init+0x152>
 8001548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154a:	3b08      	subs	r3, #8
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	210f      	movs	r1, #15
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	fa01 f303 	lsl.w	r3, r1, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	401a      	ands	r2, r3
 8001560:	6a39      	ldr	r1, [r7, #32]
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	fa01 f303 	lsl.w	r3, r1, r3
 8001568:	431a      	orrs	r2, r3
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 8090 	beq.w	800169c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800157c:	4b56      	ldr	r3, [pc, #344]	; (80016d8 <HAL_GPIO_Init+0x2dc>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	4a55      	ldr	r2, [pc, #340]	; (80016d8 <HAL_GPIO_Init+0x2dc>)
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	6193      	str	r3, [r2, #24]
 8001588:	4b53      	ldr	r3, [pc, #332]	; (80016d8 <HAL_GPIO_Init+0x2dc>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001594:	4a51      	ldr	r2, [pc, #324]	; (80016dc <HAL_GPIO_Init+0x2e0>)
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	089b      	lsrs	r3, r3, #2
 800159a:	3302      	adds	r3, #2
 800159c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	220f      	movs	r2, #15
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	4013      	ands	r3, r2
 80015b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a49      	ldr	r2, [pc, #292]	; (80016e0 <HAL_GPIO_Init+0x2e4>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d00d      	beq.n	80015dc <HAL_GPIO_Init+0x1e0>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a48      	ldr	r2, [pc, #288]	; (80016e4 <HAL_GPIO_Init+0x2e8>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d007      	beq.n	80015d8 <HAL_GPIO_Init+0x1dc>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a47      	ldr	r2, [pc, #284]	; (80016e8 <HAL_GPIO_Init+0x2ec>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d101      	bne.n	80015d4 <HAL_GPIO_Init+0x1d8>
 80015d0:	2302      	movs	r3, #2
 80015d2:	e004      	b.n	80015de <HAL_GPIO_Init+0x1e2>
 80015d4:	2303      	movs	r3, #3
 80015d6:	e002      	b.n	80015de <HAL_GPIO_Init+0x1e2>
 80015d8:	2301      	movs	r3, #1
 80015da:	e000      	b.n	80015de <HAL_GPIO_Init+0x1e2>
 80015dc:	2300      	movs	r3, #0
 80015de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e0:	f002 0203 	and.w	r2, r2, #3
 80015e4:	0092      	lsls	r2, r2, #2
 80015e6:	4093      	lsls	r3, r2
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015ee:	493b      	ldr	r1, [pc, #236]	; (80016dc <HAL_GPIO_Init+0x2e0>)
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	089b      	lsrs	r3, r3, #2
 80015f4:	3302      	adds	r3, #2
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d006      	beq.n	8001616 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001608:	4b38      	ldr	r3, [pc, #224]	; (80016ec <HAL_GPIO_Init+0x2f0>)
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	4937      	ldr	r1, [pc, #220]	; (80016ec <HAL_GPIO_Init+0x2f0>)
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	4313      	orrs	r3, r2
 8001612:	608b      	str	r3, [r1, #8]
 8001614:	e006      	b.n	8001624 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001616:	4b35      	ldr	r3, [pc, #212]	; (80016ec <HAL_GPIO_Init+0x2f0>)
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	43db      	mvns	r3, r3
 800161e:	4933      	ldr	r1, [pc, #204]	; (80016ec <HAL_GPIO_Init+0x2f0>)
 8001620:	4013      	ands	r3, r2
 8001622:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d006      	beq.n	800163e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001630:	4b2e      	ldr	r3, [pc, #184]	; (80016ec <HAL_GPIO_Init+0x2f0>)
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	492d      	ldr	r1, [pc, #180]	; (80016ec <HAL_GPIO_Init+0x2f0>)
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	4313      	orrs	r3, r2
 800163a:	60cb      	str	r3, [r1, #12]
 800163c:	e006      	b.n	800164c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800163e:	4b2b      	ldr	r3, [pc, #172]	; (80016ec <HAL_GPIO_Init+0x2f0>)
 8001640:	68da      	ldr	r2, [r3, #12]
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	43db      	mvns	r3, r3
 8001646:	4929      	ldr	r1, [pc, #164]	; (80016ec <HAL_GPIO_Init+0x2f0>)
 8001648:	4013      	ands	r3, r2
 800164a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d006      	beq.n	8001666 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001658:	4b24      	ldr	r3, [pc, #144]	; (80016ec <HAL_GPIO_Init+0x2f0>)
 800165a:	685a      	ldr	r2, [r3, #4]
 800165c:	4923      	ldr	r1, [pc, #140]	; (80016ec <HAL_GPIO_Init+0x2f0>)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	4313      	orrs	r3, r2
 8001662:	604b      	str	r3, [r1, #4]
 8001664:	e006      	b.n	8001674 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001666:	4b21      	ldr	r3, [pc, #132]	; (80016ec <HAL_GPIO_Init+0x2f0>)
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	43db      	mvns	r3, r3
 800166e:	491f      	ldr	r1, [pc, #124]	; (80016ec <HAL_GPIO_Init+0x2f0>)
 8001670:	4013      	ands	r3, r2
 8001672:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d006      	beq.n	800168e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001680:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <HAL_GPIO_Init+0x2f0>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4919      	ldr	r1, [pc, #100]	; (80016ec <HAL_GPIO_Init+0x2f0>)
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	4313      	orrs	r3, r2
 800168a:	600b      	str	r3, [r1, #0]
 800168c:	e006      	b.n	800169c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800168e:	4b17      	ldr	r3, [pc, #92]	; (80016ec <HAL_GPIO_Init+0x2f0>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	43db      	mvns	r3, r3
 8001696:	4915      	ldr	r1, [pc, #84]	; (80016ec <HAL_GPIO_Init+0x2f0>)
 8001698:	4013      	ands	r3, r2
 800169a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	3301      	adds	r3, #1
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	fa22 f303 	lsr.w	r3, r2, r3
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f47f aeaf 	bne.w	8001410 <HAL_GPIO_Init+0x14>
  }
}
 80016b2:	bf00      	nop
 80016b4:	bf00      	nop
 80016b6:	372c      	adds	r7, #44	; 0x2c
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	10320000 	.word	0x10320000
 80016c4:	10310000 	.word	0x10310000
 80016c8:	10220000 	.word	0x10220000
 80016cc:	10210000 	.word	0x10210000
 80016d0:	10120000 	.word	0x10120000
 80016d4:	10110000 	.word	0x10110000
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40010000 	.word	0x40010000
 80016e0:	40010800 	.word	0x40010800
 80016e4:	40010c00 	.word	0x40010c00
 80016e8:	40011000 	.word	0x40011000
 80016ec:	40010400 	.word	0x40010400

080016f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	887b      	ldrh	r3, [r7, #2]
 8001702:	4013      	ands	r3, r2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d002      	beq.n	800170e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001708:	2301      	movs	r3, #1
 800170a:	73fb      	strb	r3, [r7, #15]
 800170c:	e001      	b.n	8001712 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800170e:	2300      	movs	r3, #0
 8001710:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001712:	7bfb      	ldrb	r3, [r7, #15]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr

0800171e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	460b      	mov	r3, r1
 8001728:	807b      	strh	r3, [r7, #2]
 800172a:	4613      	mov	r3, r2
 800172c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800172e:	787b      	ldrb	r3, [r7, #1]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001734:	887a      	ldrh	r2, [r7, #2]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800173a:	e003      	b.n	8001744 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800173c:	887b      	ldrh	r3, [r7, #2]
 800173e:	041a      	lsls	r2, r3, #16
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	611a      	str	r2, [r3, #16]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr

0800174e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800174e:	b480      	push	{r7}
 8001750:	b085      	sub	sp, #20
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	460b      	mov	r3, r1
 8001758:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001760:	887a      	ldrh	r2, [r7, #2]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4013      	ands	r3, r2
 8001766:	041a      	lsls	r2, r3, #16
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	43d9      	mvns	r1, r3
 800176c:	887b      	ldrh	r3, [r7, #2]
 800176e:	400b      	ands	r3, r1
 8001770:	431a      	orrs	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	611a      	str	r2, [r3, #16]
}
 8001776:	bf00      	nop
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e26c      	b.n	8001c6c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b00      	cmp	r3, #0
 800179c:	f000 8087 	beq.w	80018ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017a0:	4b92      	ldr	r3, [pc, #584]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 030c 	and.w	r3, r3, #12
 80017a8:	2b04      	cmp	r3, #4
 80017aa:	d00c      	beq.n	80017c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017ac:	4b8f      	ldr	r3, [pc, #572]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 030c 	and.w	r3, r3, #12
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	d112      	bne.n	80017de <HAL_RCC_OscConfig+0x5e>
 80017b8:	4b8c      	ldr	r3, [pc, #560]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017c4:	d10b      	bne.n	80017de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c6:	4b89      	ldr	r3, [pc, #548]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d06c      	beq.n	80018ac <HAL_RCC_OscConfig+0x12c>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d168      	bne.n	80018ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e246      	b.n	8001c6c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e6:	d106      	bne.n	80017f6 <HAL_RCC_OscConfig+0x76>
 80017e8:	4b80      	ldr	r3, [pc, #512]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a7f      	ldr	r2, [pc, #508]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 80017ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	e02e      	b.n	8001854 <HAL_RCC_OscConfig+0xd4>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10c      	bne.n	8001818 <HAL_RCC_OscConfig+0x98>
 80017fe:	4b7b      	ldr	r3, [pc, #492]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a7a      	ldr	r2, [pc, #488]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 8001804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	4b78      	ldr	r3, [pc, #480]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a77      	ldr	r2, [pc, #476]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 8001810:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	e01d      	b.n	8001854 <HAL_RCC_OscConfig+0xd4>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001820:	d10c      	bne.n	800183c <HAL_RCC_OscConfig+0xbc>
 8001822:	4b72      	ldr	r3, [pc, #456]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a71      	ldr	r2, [pc, #452]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 8001828:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	4b6f      	ldr	r3, [pc, #444]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a6e      	ldr	r2, [pc, #440]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 8001834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	e00b      	b.n	8001854 <HAL_RCC_OscConfig+0xd4>
 800183c:	4b6b      	ldr	r3, [pc, #428]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a6a      	ldr	r2, [pc, #424]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 8001842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	4b68      	ldr	r3, [pc, #416]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a67      	ldr	r2, [pc, #412]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 800184e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001852:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d013      	beq.n	8001884 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185c:	f7ff fcb6 	bl	80011cc <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001864:	f7ff fcb2 	bl	80011cc <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b64      	cmp	r3, #100	; 0x64
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e1fa      	b.n	8001c6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001876:	4b5d      	ldr	r3, [pc, #372]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0f0      	beq.n	8001864 <HAL_RCC_OscConfig+0xe4>
 8001882:	e014      	b.n	80018ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001884:	f7ff fca2 	bl	80011cc <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800188c:	f7ff fc9e 	bl	80011cc <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b64      	cmp	r3, #100	; 0x64
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e1e6      	b.n	8001c6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800189e:	4b53      	ldr	r3, [pc, #332]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0x10c>
 80018aa:	e000      	b.n	80018ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d063      	beq.n	8001982 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ba:	4b4c      	ldr	r3, [pc, #304]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 030c 	and.w	r3, r3, #12
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00b      	beq.n	80018de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018c6:	4b49      	ldr	r3, [pc, #292]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 030c 	and.w	r3, r3, #12
 80018ce:	2b08      	cmp	r3, #8
 80018d0:	d11c      	bne.n	800190c <HAL_RCC_OscConfig+0x18c>
 80018d2:	4b46      	ldr	r3, [pc, #280]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d116      	bne.n	800190c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018de:	4b43      	ldr	r3, [pc, #268]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d005      	beq.n	80018f6 <HAL_RCC_OscConfig+0x176>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d001      	beq.n	80018f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e1ba      	b.n	8001c6c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f6:	4b3d      	ldr	r3, [pc, #244]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	4939      	ldr	r1, [pc, #228]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 8001906:	4313      	orrs	r3, r2
 8001908:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800190a:	e03a      	b.n	8001982 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d020      	beq.n	8001956 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001914:	4b36      	ldr	r3, [pc, #216]	; (80019f0 <HAL_RCC_OscConfig+0x270>)
 8001916:	2201      	movs	r2, #1
 8001918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191a:	f7ff fc57 	bl	80011cc <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001922:	f7ff fc53 	bl	80011cc <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e19b      	b.n	8001c6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001934:	4b2d      	ldr	r3, [pc, #180]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0f0      	beq.n	8001922 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001940:	4b2a      	ldr	r3, [pc, #168]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	4927      	ldr	r1, [pc, #156]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 8001950:	4313      	orrs	r3, r2
 8001952:	600b      	str	r3, [r1, #0]
 8001954:	e015      	b.n	8001982 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001956:	4b26      	ldr	r3, [pc, #152]	; (80019f0 <HAL_RCC_OscConfig+0x270>)
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195c:	f7ff fc36 	bl	80011cc <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001964:	f7ff fc32 	bl	80011cc <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e17a      	b.n	8001c6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001976:	4b1d      	ldr	r3, [pc, #116]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	2b00      	cmp	r3, #0
 800198c:	d03a      	beq.n	8001a04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d019      	beq.n	80019ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001996:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <HAL_RCC_OscConfig+0x274>)
 8001998:	2201      	movs	r2, #1
 800199a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199c:	f7ff fc16 	bl	80011cc <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a4:	f7ff fc12 	bl	80011cc <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e15a      	b.n	8001c6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019b6:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <HAL_RCC_OscConfig+0x26c>)
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019c2:	2001      	movs	r0, #1
 80019c4:	f000 fa9a 	bl	8001efc <RCC_Delay>
 80019c8:	e01c      	b.n	8001a04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ca:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <HAL_RCC_OscConfig+0x274>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d0:	f7ff fbfc 	bl	80011cc <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d6:	e00f      	b.n	80019f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d8:	f7ff fbf8 	bl	80011cc <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d908      	bls.n	80019f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e140      	b.n	8001c6c <HAL_RCC_OscConfig+0x4ec>
 80019ea:	bf00      	nop
 80019ec:	40021000 	.word	0x40021000
 80019f0:	42420000 	.word	0x42420000
 80019f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f8:	4b9e      	ldr	r3, [pc, #632]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 80019fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1e9      	bne.n	80019d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 80a6 	beq.w	8001b5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a12:	2300      	movs	r3, #0
 8001a14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a16:	4b97      	ldr	r3, [pc, #604]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10d      	bne.n	8001a3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a22:	4b94      	ldr	r3, [pc, #592]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	4a93      	ldr	r2, [pc, #588]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	61d3      	str	r3, [r2, #28]
 8001a2e:	4b91      	ldr	r3, [pc, #580]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3e:	4b8e      	ldr	r3, [pc, #568]	; (8001c78 <HAL_RCC_OscConfig+0x4f8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d118      	bne.n	8001a7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a4a:	4b8b      	ldr	r3, [pc, #556]	; (8001c78 <HAL_RCC_OscConfig+0x4f8>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a8a      	ldr	r2, [pc, #552]	; (8001c78 <HAL_RCC_OscConfig+0x4f8>)
 8001a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a56:	f7ff fbb9 	bl	80011cc <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a5e:	f7ff fbb5 	bl	80011cc <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b64      	cmp	r3, #100	; 0x64
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e0fd      	b.n	8001c6c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a70:	4b81      	ldr	r3, [pc, #516]	; (8001c78 <HAL_RCC_OscConfig+0x4f8>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0f0      	beq.n	8001a5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d106      	bne.n	8001a92 <HAL_RCC_OscConfig+0x312>
 8001a84:	4b7b      	ldr	r3, [pc, #492]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	4a7a      	ldr	r2, [pc, #488]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	6213      	str	r3, [r2, #32]
 8001a90:	e02d      	b.n	8001aee <HAL_RCC_OscConfig+0x36e>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10c      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x334>
 8001a9a:	4b76      	ldr	r3, [pc, #472]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	4a75      	ldr	r2, [pc, #468]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001aa0:	f023 0301 	bic.w	r3, r3, #1
 8001aa4:	6213      	str	r3, [r2, #32]
 8001aa6:	4b73      	ldr	r3, [pc, #460]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	4a72      	ldr	r2, [pc, #456]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001aac:	f023 0304 	bic.w	r3, r3, #4
 8001ab0:	6213      	str	r3, [r2, #32]
 8001ab2:	e01c      	b.n	8001aee <HAL_RCC_OscConfig+0x36e>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	2b05      	cmp	r3, #5
 8001aba:	d10c      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x356>
 8001abc:	4b6d      	ldr	r3, [pc, #436]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	4a6c      	ldr	r2, [pc, #432]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001ac2:	f043 0304 	orr.w	r3, r3, #4
 8001ac6:	6213      	str	r3, [r2, #32]
 8001ac8:	4b6a      	ldr	r3, [pc, #424]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	4a69      	ldr	r2, [pc, #420]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	6213      	str	r3, [r2, #32]
 8001ad4:	e00b      	b.n	8001aee <HAL_RCC_OscConfig+0x36e>
 8001ad6:	4b67      	ldr	r3, [pc, #412]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	4a66      	ldr	r2, [pc, #408]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001adc:	f023 0301 	bic.w	r3, r3, #1
 8001ae0:	6213      	str	r3, [r2, #32]
 8001ae2:	4b64      	ldr	r3, [pc, #400]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	4a63      	ldr	r2, [pc, #396]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001ae8:	f023 0304 	bic.w	r3, r3, #4
 8001aec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d015      	beq.n	8001b22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af6:	f7ff fb69 	bl	80011cc <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001afc:	e00a      	b.n	8001b14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001afe:	f7ff fb65 	bl	80011cc <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e0ab      	b.n	8001c6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b14:	4b57      	ldr	r3, [pc, #348]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0ee      	beq.n	8001afe <HAL_RCC_OscConfig+0x37e>
 8001b20:	e014      	b.n	8001b4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b22:	f7ff fb53 	bl	80011cc <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b28:	e00a      	b.n	8001b40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b2a:	f7ff fb4f 	bl	80011cc <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e095      	b.n	8001c6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b40:	4b4c      	ldr	r3, [pc, #304]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1ee      	bne.n	8001b2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b4c:	7dfb      	ldrb	r3, [r7, #23]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d105      	bne.n	8001b5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b52:	4b48      	ldr	r3, [pc, #288]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	4a47      	ldr	r2, [pc, #284]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001b58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f000 8081 	beq.w	8001c6a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b68:	4b42      	ldr	r3, [pc, #264]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 030c 	and.w	r3, r3, #12
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d061      	beq.n	8001c38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	69db      	ldr	r3, [r3, #28]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d146      	bne.n	8001c0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7c:	4b3f      	ldr	r3, [pc, #252]	; (8001c7c <HAL_RCC_OscConfig+0x4fc>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b82:	f7ff fb23 	bl	80011cc <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8a:	f7ff fb1f 	bl	80011cc <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e067      	b.n	8001c6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b9c:	4b35      	ldr	r3, [pc, #212]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1f0      	bne.n	8001b8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb0:	d108      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bb2:	4b30      	ldr	r3, [pc, #192]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	492d      	ldr	r1, [pc, #180]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bc4:	4b2b      	ldr	r3, [pc, #172]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a19      	ldr	r1, [r3, #32]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	430b      	orrs	r3, r1
 8001bd6:	4927      	ldr	r1, [pc, #156]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bdc:	4b27      	ldr	r3, [pc, #156]	; (8001c7c <HAL_RCC_OscConfig+0x4fc>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be2:	f7ff faf3 	bl	80011cc <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bea:	f7ff faef 	bl	80011cc <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e037      	b.n	8001c6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bfc:	4b1d      	ldr	r3, [pc, #116]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0f0      	beq.n	8001bea <HAL_RCC_OscConfig+0x46a>
 8001c08:	e02f      	b.n	8001c6a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0a:	4b1c      	ldr	r3, [pc, #112]	; (8001c7c <HAL_RCC_OscConfig+0x4fc>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c10:	f7ff fadc 	bl	80011cc <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c18:	f7ff fad8 	bl	80011cc <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e020      	b.n	8001c6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c2a:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f0      	bne.n	8001c18 <HAL_RCC_OscConfig+0x498>
 8001c36:	e018      	b.n	8001c6a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d101      	bne.n	8001c44 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e013      	b.n	8001c6c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c44:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d106      	bne.n	8001c66 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d001      	beq.n	8001c6a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40021000 	.word	0x40021000
 8001c78:	40007000 	.word	0x40007000
 8001c7c:	42420060 	.word	0x42420060

08001c80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0d0      	b.n	8001e36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c94:	4b6a      	ldr	r3, [pc, #424]	; (8001e40 <HAL_RCC_ClockConfig+0x1c0>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d910      	bls.n	8001cc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca2:	4b67      	ldr	r3, [pc, #412]	; (8001e40 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f023 0207 	bic.w	r2, r3, #7
 8001caa:	4965      	ldr	r1, [pc, #404]	; (8001e40 <HAL_RCC_ClockConfig+0x1c0>)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb2:	4b63      	ldr	r3, [pc, #396]	; (8001e40 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d001      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e0b8      	b.n	8001e36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d020      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cdc:	4b59      	ldr	r3, [pc, #356]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	4a58      	ldr	r2, [pc, #352]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ce6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0308 	and.w	r3, r3, #8
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d005      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cf4:	4b53      	ldr	r3, [pc, #332]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	4a52      	ldr	r2, [pc, #328]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cfe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d00:	4b50      	ldr	r3, [pc, #320]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	494d      	ldr	r1, [pc, #308]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d040      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d107      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d26:	4b47      	ldr	r3, [pc, #284]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d115      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e07f      	b.n	8001e36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d107      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d3e:	4b41      	ldr	r3, [pc, #260]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d109      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e073      	b.n	8001e36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4e:	4b3d      	ldr	r3, [pc, #244]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e06b      	b.n	8001e36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d5e:	4b39      	ldr	r3, [pc, #228]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f023 0203 	bic.w	r2, r3, #3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	4936      	ldr	r1, [pc, #216]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d70:	f7ff fa2c 	bl	80011cc <HAL_GetTick>
 8001d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d76:	e00a      	b.n	8001d8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d78:	f7ff fa28 	bl	80011cc <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e053      	b.n	8001e36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8e:	4b2d      	ldr	r3, [pc, #180]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 020c 	and.w	r2, r3, #12
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d1eb      	bne.n	8001d78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001da0:	4b27      	ldr	r3, [pc, #156]	; (8001e40 <HAL_RCC_ClockConfig+0x1c0>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d210      	bcs.n	8001dd0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dae:	4b24      	ldr	r3, [pc, #144]	; (8001e40 <HAL_RCC_ClockConfig+0x1c0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 0207 	bic.w	r2, r3, #7
 8001db6:	4922      	ldr	r1, [pc, #136]	; (8001e40 <HAL_RCC_ClockConfig+0x1c0>)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dbe:	4b20      	ldr	r3, [pc, #128]	; (8001e40 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d001      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e032      	b.n	8001e36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d008      	beq.n	8001dee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ddc:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	4916      	ldr	r1, [pc, #88]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d009      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dfa:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	490e      	ldr	r1, [pc, #56]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e0e:	f000 f821 	bl	8001e54 <HAL_RCC_GetSysClockFreq>
 8001e12:	4602      	mov	r2, r0
 8001e14:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	091b      	lsrs	r3, r3, #4
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	490a      	ldr	r1, [pc, #40]	; (8001e48 <HAL_RCC_ClockConfig+0x1c8>)
 8001e20:	5ccb      	ldrb	r3, [r1, r3]
 8001e22:	fa22 f303 	lsr.w	r3, r2, r3
 8001e26:	4a09      	ldr	r2, [pc, #36]	; (8001e4c <HAL_RCC_ClockConfig+0x1cc>)
 8001e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e2a:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <HAL_RCC_ClockConfig+0x1d0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff f98a 	bl	8001148 <HAL_InitTick>

  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40022000 	.word	0x40022000
 8001e44:	40021000 	.word	0x40021000
 8001e48:	08002780 	.word	0x08002780
 8001e4c:	20000058 	.word	0x20000058
 8001e50:	20000080 	.word	0x20000080

08001e54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b087      	sub	sp, #28
 8001e58:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	2300      	movs	r3, #0
 8001e68:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f003 030c 	and.w	r3, r3, #12
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	d002      	beq.n	8001e84 <HAL_RCC_GetSysClockFreq+0x30>
 8001e7e:	2b08      	cmp	r3, #8
 8001e80:	d003      	beq.n	8001e8a <HAL_RCC_GetSysClockFreq+0x36>
 8001e82:	e027      	b.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e84:	4b19      	ldr	r3, [pc, #100]	; (8001eec <HAL_RCC_GetSysClockFreq+0x98>)
 8001e86:	613b      	str	r3, [r7, #16]
      break;
 8001e88:	e027      	b.n	8001eda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	0c9b      	lsrs	r3, r3, #18
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	4a17      	ldr	r2, [pc, #92]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e94:	5cd3      	ldrb	r3, [r2, r3]
 8001e96:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d010      	beq.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ea2:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	0c5b      	lsrs	r3, r3, #17
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	4a11      	ldr	r2, [pc, #68]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001eae:	5cd3      	ldrb	r3, [r2, r3]
 8001eb0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a0d      	ldr	r2, [pc, #52]	; (8001eec <HAL_RCC_GetSysClockFreq+0x98>)
 8001eb6:	fb02 f203 	mul.w	r2, r2, r3
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	e004      	b.n	8001ece <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a0c      	ldr	r2, [pc, #48]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ec8:	fb02 f303 	mul.w	r3, r2, r3
 8001ecc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	613b      	str	r3, [r7, #16]
      break;
 8001ed2:	e002      	b.n	8001eda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <HAL_RCC_GetSysClockFreq+0x98>)
 8001ed6:	613b      	str	r3, [r7, #16]
      break;
 8001ed8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eda:	693b      	ldr	r3, [r7, #16]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	371c      	adds	r7, #28
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	007a1200 	.word	0x007a1200
 8001ef0:	08002790 	.word	0x08002790
 8001ef4:	080027a0 	.word	0x080027a0
 8001ef8:	003d0900 	.word	0x003d0900

08001efc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f04:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <RCC_Delay+0x34>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a0a      	ldr	r2, [pc, #40]	; (8001f34 <RCC_Delay+0x38>)
 8001f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0e:	0a5b      	lsrs	r3, r3, #9
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	fb02 f303 	mul.w	r3, r2, r3
 8001f16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f18:	bf00      	nop
  }
  while (Delay --);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	1e5a      	subs	r2, r3, #1
 8001f1e:	60fa      	str	r2, [r7, #12]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1f9      	bne.n	8001f18 <RCC_Delay+0x1c>
}
 8001f24:	bf00      	nop
 8001f26:	bf00      	nop
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr
 8001f30:	20000058 	.word	0x20000058
 8001f34:	10624dd3 	.word	0x10624dd3

08001f38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e041      	b.n	8001fce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d106      	bne.n	8001f64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7fe fbf2 	bl	8000748 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2202      	movs	r2, #2
 8001f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3304      	adds	r3, #4
 8001f74:	4619      	mov	r1, r3
 8001f76:	4610      	mov	r0, r2
 8001f78:	f000 fa6e 	bl	8002458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d001      	beq.n	8001ff0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e035      	b.n	800205c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f042 0201 	orr.w	r2, r2, #1
 8002006:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a16      	ldr	r2, [pc, #88]	; (8002068 <HAL_TIM_Base_Start_IT+0x90>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d009      	beq.n	8002026 <HAL_TIM_Base_Start_IT+0x4e>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800201a:	d004      	beq.n	8002026 <HAL_TIM_Base_Start_IT+0x4e>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a12      	ldr	r2, [pc, #72]	; (800206c <HAL_TIM_Base_Start_IT+0x94>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d111      	bne.n	800204a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2b06      	cmp	r3, #6
 8002036:	d010      	beq.n	800205a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0201 	orr.w	r2, r2, #1
 8002046:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002048:	e007      	b.n	800205a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f042 0201 	orr.w	r2, r2, #1
 8002058:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	40012c00 	.word	0x40012c00
 800206c:	40000400 	.word	0x40000400

08002070 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b02      	cmp	r3, #2
 8002084:	d122      	bne.n	80020cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b02      	cmp	r3, #2
 8002092:	d11b      	bne.n	80020cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f06f 0202 	mvn.w	r2, #2
 800209c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f9b4 	bl	8002420 <HAL_TIM_IC_CaptureCallback>
 80020b8:	e005      	b.n	80020c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f9a7 	bl	800240e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 f9b6 	bl	8002432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d122      	bne.n	8002120 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d11b      	bne.n	8002120 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f06f 0204 	mvn.w	r2, #4
 80020f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2202      	movs	r2, #2
 80020f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f98a 	bl	8002420 <HAL_TIM_IC_CaptureCallback>
 800210c:	e005      	b.n	800211a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f97d 	bl	800240e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f98c 	bl	8002432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b08      	cmp	r3, #8
 800212c:	d122      	bne.n	8002174 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	2b08      	cmp	r3, #8
 800213a:	d11b      	bne.n	8002174 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 0208 	mvn.w	r2, #8
 8002144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2204      	movs	r2, #4
 800214a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f960 	bl	8002420 <HAL_TIM_IC_CaptureCallback>
 8002160:	e005      	b.n	800216e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f953 	bl	800240e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f962 	bl	8002432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	f003 0310 	and.w	r3, r3, #16
 800217e:	2b10      	cmp	r3, #16
 8002180:	d122      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f003 0310 	and.w	r3, r3, #16
 800218c:	2b10      	cmp	r3, #16
 800218e:	d11b      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f06f 0210 	mvn.w	r2, #16
 8002198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2208      	movs	r2, #8
 800219e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f936 	bl	8002420 <HAL_TIM_IC_CaptureCallback>
 80021b4:	e005      	b.n	80021c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f929 	bl	800240e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f938 	bl	8002432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d10e      	bne.n	80021f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d107      	bne.n	80021f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f06f 0201 	mvn.w	r2, #1
 80021ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7fe fb6c 	bl	80008cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021fe:	2b80      	cmp	r3, #128	; 0x80
 8002200:	d10e      	bne.n	8002220 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800220c:	2b80      	cmp	r3, #128	; 0x80
 800220e:	d107      	bne.n	8002220 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 fa6b 	bl	80026f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222a:	2b40      	cmp	r3, #64	; 0x40
 800222c:	d10e      	bne.n	800224c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002238:	2b40      	cmp	r3, #64	; 0x40
 800223a:	d107      	bne.n	800224c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f8fc 	bl	8002444 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	f003 0320 	and.w	r3, r3, #32
 8002256:	2b20      	cmp	r3, #32
 8002258:	d10e      	bne.n	8002278 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f003 0320 	and.w	r3, r3, #32
 8002264:	2b20      	cmp	r3, #32
 8002266:	d107      	bne.n	8002278 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f06f 0220 	mvn.w	r2, #32
 8002270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 fa36 	bl	80026e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800228a:	2300      	movs	r3, #0
 800228c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <HAL_TIM_ConfigClockSource+0x1c>
 8002298:	2302      	movs	r3, #2
 800229a:	e0b4      	b.n	8002406 <HAL_TIM_ConfigClockSource+0x186>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2202      	movs	r2, #2
 80022a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022d4:	d03e      	beq.n	8002354 <HAL_TIM_ConfigClockSource+0xd4>
 80022d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022da:	f200 8087 	bhi.w	80023ec <HAL_TIM_ConfigClockSource+0x16c>
 80022de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022e2:	f000 8086 	beq.w	80023f2 <HAL_TIM_ConfigClockSource+0x172>
 80022e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022ea:	d87f      	bhi.n	80023ec <HAL_TIM_ConfigClockSource+0x16c>
 80022ec:	2b70      	cmp	r3, #112	; 0x70
 80022ee:	d01a      	beq.n	8002326 <HAL_TIM_ConfigClockSource+0xa6>
 80022f0:	2b70      	cmp	r3, #112	; 0x70
 80022f2:	d87b      	bhi.n	80023ec <HAL_TIM_ConfigClockSource+0x16c>
 80022f4:	2b60      	cmp	r3, #96	; 0x60
 80022f6:	d050      	beq.n	800239a <HAL_TIM_ConfigClockSource+0x11a>
 80022f8:	2b60      	cmp	r3, #96	; 0x60
 80022fa:	d877      	bhi.n	80023ec <HAL_TIM_ConfigClockSource+0x16c>
 80022fc:	2b50      	cmp	r3, #80	; 0x50
 80022fe:	d03c      	beq.n	800237a <HAL_TIM_ConfigClockSource+0xfa>
 8002300:	2b50      	cmp	r3, #80	; 0x50
 8002302:	d873      	bhi.n	80023ec <HAL_TIM_ConfigClockSource+0x16c>
 8002304:	2b40      	cmp	r3, #64	; 0x40
 8002306:	d058      	beq.n	80023ba <HAL_TIM_ConfigClockSource+0x13a>
 8002308:	2b40      	cmp	r3, #64	; 0x40
 800230a:	d86f      	bhi.n	80023ec <HAL_TIM_ConfigClockSource+0x16c>
 800230c:	2b30      	cmp	r3, #48	; 0x30
 800230e:	d064      	beq.n	80023da <HAL_TIM_ConfigClockSource+0x15a>
 8002310:	2b30      	cmp	r3, #48	; 0x30
 8002312:	d86b      	bhi.n	80023ec <HAL_TIM_ConfigClockSource+0x16c>
 8002314:	2b20      	cmp	r3, #32
 8002316:	d060      	beq.n	80023da <HAL_TIM_ConfigClockSource+0x15a>
 8002318:	2b20      	cmp	r3, #32
 800231a:	d867      	bhi.n	80023ec <HAL_TIM_ConfigClockSource+0x16c>
 800231c:	2b00      	cmp	r3, #0
 800231e:	d05c      	beq.n	80023da <HAL_TIM_ConfigClockSource+0x15a>
 8002320:	2b10      	cmp	r3, #16
 8002322:	d05a      	beq.n	80023da <HAL_TIM_ConfigClockSource+0x15a>
 8002324:	e062      	b.n	80023ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6818      	ldr	r0, [r3, #0]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	6899      	ldr	r1, [r3, #8]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	f000 f95e 	bl	80025f6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002348:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	609a      	str	r2, [r3, #8]
      break;
 8002352:	e04f      	b.n	80023f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6818      	ldr	r0, [r3, #0]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	6899      	ldr	r1, [r3, #8]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f000 f947 	bl	80025f6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002376:	609a      	str	r2, [r3, #8]
      break;
 8002378:	e03c      	b.n	80023f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	6859      	ldr	r1, [r3, #4]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	461a      	mov	r2, r3
 8002388:	f000 f8be 	bl	8002508 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2150      	movs	r1, #80	; 0x50
 8002392:	4618      	mov	r0, r3
 8002394:	f000 f915 	bl	80025c2 <TIM_ITRx_SetConfig>
      break;
 8002398:	e02c      	b.n	80023f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6818      	ldr	r0, [r3, #0]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	6859      	ldr	r1, [r3, #4]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	461a      	mov	r2, r3
 80023a8:	f000 f8dc 	bl	8002564 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2160      	movs	r1, #96	; 0x60
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 f905 	bl	80025c2 <TIM_ITRx_SetConfig>
      break;
 80023b8:	e01c      	b.n	80023f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	6859      	ldr	r1, [r3, #4]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	461a      	mov	r2, r3
 80023c8:	f000 f89e 	bl	8002508 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2140      	movs	r1, #64	; 0x40
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 f8f5 	bl	80025c2 <TIM_ITRx_SetConfig>
      break;
 80023d8:	e00c      	b.n	80023f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4619      	mov	r1, r3
 80023e4:	4610      	mov	r0, r2
 80023e6:	f000 f8ec 	bl	80025c2 <TIM_ITRx_SetConfig>
      break;
 80023ea:	e003      	b.n	80023f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
      break;
 80023f0:	e000      	b.n	80023f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80023f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002404:	7bfb      	ldrb	r3, [r7, #15]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr

08002420 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr

08002432 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr

08002444 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr
	...

08002458 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a25      	ldr	r2, [pc, #148]	; (8002500 <TIM_Base_SetConfig+0xa8>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d007      	beq.n	8002480 <TIM_Base_SetConfig+0x28>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002476:	d003      	beq.n	8002480 <TIM_Base_SetConfig+0x28>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a22      	ldr	r2, [pc, #136]	; (8002504 <TIM_Base_SetConfig+0xac>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d108      	bne.n	8002492 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002486:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	4313      	orrs	r3, r2
 8002490:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a1a      	ldr	r2, [pc, #104]	; (8002500 <TIM_Base_SetConfig+0xa8>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d007      	beq.n	80024aa <TIM_Base_SetConfig+0x52>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a0:	d003      	beq.n	80024aa <TIM_Base_SetConfig+0x52>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a17      	ldr	r2, [pc, #92]	; (8002504 <TIM_Base_SetConfig+0xac>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d108      	bne.n	80024bc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a07      	ldr	r2, [pc, #28]	; (8002500 <TIM_Base_SetConfig+0xa8>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d103      	bne.n	80024f0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	691a      	ldr	r2, [r3, #16]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	615a      	str	r2, [r3, #20]
}
 80024f6:	bf00      	nop
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr
 8002500:	40012c00 	.word	0x40012c00
 8002504:	40000400 	.word	0x40000400

08002508 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002508:	b480      	push	{r7}
 800250a:	b087      	sub	sp, #28
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	f023 0201 	bic.w	r2, r3, #1
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002532:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f023 030a 	bic.w	r3, r3, #10
 8002544:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	4313      	orrs	r3, r2
 800254c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	621a      	str	r2, [r3, #32]
}
 800255a:	bf00      	nop
 800255c:	371c      	adds	r7, #28
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr

08002564 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002564:	b480      	push	{r7}
 8002566:	b087      	sub	sp, #28
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	f023 0210 	bic.w	r2, r3, #16
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800258e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	031b      	lsls	r3, r3, #12
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	4313      	orrs	r3, r2
 8002598:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80025a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	011b      	lsls	r3, r3, #4
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	621a      	str	r2, [r3, #32]
}
 80025b8:	bf00      	nop
 80025ba:	371c      	adds	r7, #28
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr

080025c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b085      	sub	sp, #20
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
 80025ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4313      	orrs	r3, r2
 80025e0:	f043 0307 	orr.w	r3, r3, #7
 80025e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	609a      	str	r2, [r3, #8]
}
 80025ec:	bf00      	nop
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr

080025f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b087      	sub	sp, #28
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	60f8      	str	r0, [r7, #12]
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	607a      	str	r2, [r7, #4]
 8002602:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002610:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	021a      	lsls	r2, r3, #8
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	431a      	orrs	r2, r3
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	4313      	orrs	r3, r2
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	4313      	orrs	r3, r2
 8002622:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	609a      	str	r2, [r3, #8]
}
 800262a:	bf00      	nop
 800262c:	371c      	adds	r7, #28
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr

08002634 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002644:	2b01      	cmp	r3, #1
 8002646:	d101      	bne.n	800264c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002648:	2302      	movs	r3, #2
 800264a:	e041      	b.n	80026d0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002672:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	4313      	orrs	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a14      	ldr	r2, [pc, #80]	; (80026dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d009      	beq.n	80026a4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002698:	d004      	beq.n	80026a4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a10      	ldr	r2, [pc, #64]	; (80026e0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d10c      	bne.n	80026be <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	40012c00 	.word	0x40012c00
 80026e0:	40000400 	.word	0x40000400

080026e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr

080026f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr

08002708 <__libc_init_array>:
 8002708:	b570      	push	{r4, r5, r6, lr}
 800270a:	2600      	movs	r6, #0
 800270c:	4d0c      	ldr	r5, [pc, #48]	; (8002740 <__libc_init_array+0x38>)
 800270e:	4c0d      	ldr	r4, [pc, #52]	; (8002744 <__libc_init_array+0x3c>)
 8002710:	1b64      	subs	r4, r4, r5
 8002712:	10a4      	asrs	r4, r4, #2
 8002714:	42a6      	cmp	r6, r4
 8002716:	d109      	bne.n	800272c <__libc_init_array+0x24>
 8002718:	f000 f822 	bl	8002760 <_init>
 800271c:	2600      	movs	r6, #0
 800271e:	4d0a      	ldr	r5, [pc, #40]	; (8002748 <__libc_init_array+0x40>)
 8002720:	4c0a      	ldr	r4, [pc, #40]	; (800274c <__libc_init_array+0x44>)
 8002722:	1b64      	subs	r4, r4, r5
 8002724:	10a4      	asrs	r4, r4, #2
 8002726:	42a6      	cmp	r6, r4
 8002728:	d105      	bne.n	8002736 <__libc_init_array+0x2e>
 800272a:	bd70      	pop	{r4, r5, r6, pc}
 800272c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002730:	4798      	blx	r3
 8002732:	3601      	adds	r6, #1
 8002734:	e7ee      	b.n	8002714 <__libc_init_array+0xc>
 8002736:	f855 3b04 	ldr.w	r3, [r5], #4
 800273a:	4798      	blx	r3
 800273c:	3601      	adds	r6, #1
 800273e:	e7f2      	b.n	8002726 <__libc_init_array+0x1e>
 8002740:	080027a4 	.word	0x080027a4
 8002744:	080027a4 	.word	0x080027a4
 8002748:	080027a4 	.word	0x080027a4
 800274c:	080027a8 	.word	0x080027a8

08002750 <memset>:
 8002750:	4603      	mov	r3, r0
 8002752:	4402      	add	r2, r0
 8002754:	4293      	cmp	r3, r2
 8002756:	d100      	bne.n	800275a <memset+0xa>
 8002758:	4770      	bx	lr
 800275a:	f803 1b01 	strb.w	r1, [r3], #1
 800275e:	e7f9      	b.n	8002754 <memset+0x4>

08002760 <_init>:
 8002760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002762:	bf00      	nop
 8002764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002766:	bc08      	pop	{r3}
 8002768:	469e      	mov	lr, r3
 800276a:	4770      	bx	lr

0800276c <_fini>:
 800276c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800276e:	bf00      	nop
 8002770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002772:	bc08      	pop	{r3}
 8002774:	469e      	mov	lr, r3
 8002776:	4770      	bx	lr
